{"spiral-matrix": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not matrix:\n            return []\n        \n        result = []\n        top, bottom = 0, len(matrix) - 1\n        left, right = 0, len(matrix[0]) - 1\n        \n        while top <= bottom and left <= right:\n            # Traverse top row\n            for i in range(left, right + 1):\n                result.append(matrix[top][i])\n            top += 1\n            \n            if top > bottom:\n                break\n            \n            # Traverse right column\n            for i in range(top, bottom + 1):\n                result.append(matrix[i][right])\n            right -= 1\n            \n            if left > right:\n                break\n            \n            # Traverse bottom row\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    result.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if top > bottom:\n                break\n            \n            # Traverse left column\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    result.append(matrix[i][left])\n                left += 1\n        \n        return result\n", "summary-ranges": "from typing import List\n\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        res = []\n        start = nums[0]\n        prev = nums[0]\n        for i in range(1, len(nums)):\n            current = nums[i]\n            if current == prev + 1:\n                prev = current\n            else:\n                if start == prev:\n                    res.append(str(start))\n                else:\n                    res.append(f\"{start}->{prev}\")\n                start = current\n                prev = current\n        # Add the last range\n        if start == prev:\n            res.append(str(start))\n        else:\n            res.append(f\"{start}->{prev}\")\n        return res\n", "distinct-subsequences": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        m, n = len(t), len(s)\n        dp = [0] * (m + 1)\n        dp[0] = 1  # Empty string can be formed once\n        \n        for char in s:\n            # Traverse backwards to prevent overwriting needed values\n            for i in range(m, 0, -1):\n                if t[i - 1] == char:\n                    dp[i] += dp[i - 1]\n        \n        return dp[m]\n", "first-missing-positive": "from typing import List\n\nclass Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        n = len(nums)\n        # Rearrange the array so that each number is at its corresponding index\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n                correct = nums[i] - 1\n                nums[i], nums[correct] = nums[correct], nums[i]\n        \n        # Find the first position where the number is not correct\n        for i in range(n):\n            if nums[i] != i + 1:\n                return i + 1\n        return n + 1\n", "permutation-sequence": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        # Precompute the factorials from 0! to n!\n        factorials = [1] * (n + 1)\n        for i in range(1, n + 1):\n            factorials[i] = factorials[i - 1] * i\n        \n        # Convert k to 0-based index\n        k -= 1\n        \n        # List of available numbers as strings\n        numbers = list(map(str, range(1, n + 1)))\n        result = []\n        \n        for i in range(n):\n            # Current factorial is (n-1 - i)!\n            current_fact = factorials[(n - 1) - i]\n            \n            # Determine the index of the current digit\n            index = k // current_fact\n            result.append(numbers[index])\n            \n            # Remove the selected digit from the list\n            numbers.pop(index)\n            \n            # Update k to the remaining permutations\n            k %= current_fact\n        \n        return ''.join(result)\n", "two-sum-ii-input-array-is-sorted": "from typing import List\n\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n        return []  # This line is theoretically unreachable as per problem constraints\n", "expression-add-operators": "from typing import List\n\nclass Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        result = []\n        n = len(num)\n        \n        def backtrack(index: int, prev_val: int, curr_val: int, expr: str):\n            if index == n:\n                if curr_val == target:\n                    result.append(expr)\n                return\n            \n            for end in range(index, n):\n                # Skip numbers with leading zeros\n                if end > index and num[index] == '0':\n                    break\n                \n                current_str = num[index:end+1]\n                current_num = int(current_str)\n                \n                if index == 0:\n                    backtrack(end + 1, current_num, current_num, current_str)\n                else:\n                    # Addition\n                    backtrack(end + 1, current_num, curr_val + current_num, expr + '+' + current_str)\n                    # Subtraction\n                    backtrack(end + 1, -current_num, curr_val - current_num, expr + '-' + current_str)\n                    # Multiplication\n                    new_prev = prev_val * current_num\n                    new_curr = (curr_val - prev_val) + new_prev\n                    backtrack(end + 1, new_prev, new_curr, expr + '*' + current_str)\n        \n        backtrack(0, 0, 0, \"\")\n        return result\n", "sum-root-to-leaf-numbers": "class Solution:\n    def sumNumbers(self, root: 'TreeNode') -> int:\n        def dfs(node, current):\n            current = current * 10 + node.val\n            if not node.left and not node.right:\n                return current\n            total = 0\n            if node.left:\n                total += dfs(node.left, current)\n            if node.right:\n                total += dfs(node.right, current)\n            return total\n        \n        return dfs(root, 0)\n", "license-key-formatting": "class Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -> str:\n        # Step 1: Remove all dashes and convert to uppercase\n        processed = s.replace('-', '').upper()\n        if not processed:\n            return ''\n        \n        n = len(processed)\n        # Step 2: Determine the length of the first group\n        m = n % k\n        if m == 0:\n            m = k\n        \n        # Step 3: Split into groups\n        res = [processed[:m]]\n        for i in range(m, n, k):\n            res.append(processed[i:i + k])\n        \n        # Step 4: Join the groups with dashes\n        return '-'.join(res)\n", "gas-station": "from typing import List\n\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        total_tank = 0\n        current_tank = 0\n        start = 0\n        \n        for i in range(n):\n            total_tank += gas[i] - cost[i]\n            current_tank += gas[i] - cost[i]\n            \n            if current_tank < 0:\n                start = i + 1\n                current_tank = 0\n        \n        return start if total_tank >= 0 else -1\n", "burst-balloons": "from typing import List\n\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        # Handle edge case if necessary\n        if not nums:\n            return 0\n        \n        n_orig = len(nums)\n        new_nums = [1] + nums + [1]\n        n = len(new_nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for length in range(2, n):\n            for i in range(n - length):\n                j = i + length\n                for k in range(i + 1, j):\n                    current = dp[i][k] + dp[k][j] + new_nums[i] * new_nums[k] * new_nums[j]\n                    if current > dp[i][j]:\n                        dp[i][j] = current\n        \n        return dp[0][n-1]\n", "plus-one": "class Solution(object):\n    def plusOne(self, digits):\n        carry = 1\n        n = len(digits)\n        for i in range(n - 1, -1, -1):\n            total = digits[i] + carry\n            digits[i] = total % 10\n            carry = total // 10\n            if carry == 0:\n                break\n        if carry == 1:\n            digits.insert(0, 1)\n        return digits\n", "regular-expression-matching": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        n = len(s)\n        m = len(p)\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True  # empty string matches empty pattern\n        \n        # Fill first row (case when s is empty)\n        for j in range(1, m + 1):\n            if p[j-1] == '*':\n                dp[0][j] = dp[0][j-2]\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if p[j-1] == '*':\n                    # Check zero occurrence of the previous character\n                    dp[i][j] = dp[i][j-2]\n                    # Check one or more occurrences if previous character matches\n                    prev_char = p[j-2]\n                    if prev_char == s[i-1] or prev_char == '.':\n                        dp[i][j] |= dp[i-1][j]\n                else:\n                    # Current pattern is not a star, check direct match\n                    if p[j-1] == s[i-1] or p[j-1] == '.':\n                        dp[i][j] = dp[i-1][j-1]\n        \n        return dp[n][m]\n", "create-maximum-number": "class Solution:\n    def maxNumber(self, nums1, nums2, k):\n        def max_subsequence(nums, x):\n            stack = []\n            n = len(nums)\n            for i in range(n):\n                num = nums[i]\n                while stack and stack[-1] < num and (len(stack) - 1 + (n - i) >= x):\n                    stack.pop()\n                if len(stack) < x:\n                    stack.append(num)\n            return stack\n\n        def greater(a, i, b, j):\n            len_a = len(a) - i\n            len_b = len(b) - j\n            min_len = min(len_a, len_b)\n            for k in range(min_len):\n                if a[i + k] > b[j + k]:\n                    return True\n                elif a[i + k] < b[j + k]:\n                    return False\n            return len_a >= len_b\n\n        def merge(a, b):\n            merged = []\n            i = j = 0\n            while i < len(a) and j < len(b):\n                if a[i] > b[j]:\n                    merged.append(a[i])\n                    i += 1\n                elif a[i] < b[j]:\n                    merged.append(b[j])\n                    j += 1\n                else:\n                    if greater(a, i, b, j):\n                        merged.append(a[i])\n                        i += 1\n                    else:\n                        merged.append(b[j])\n                        j += 1\n            merged.extend(a[i:])\n            merged.extend(b[j:])\n            return merged\n\n        best = []\n        m = len(nums1)\n        n = len(nums2)\n        start = max(0, k - n)\n        end = min(k, m)\n        for i in range(start, end + 1):\n            if (k - i) < 0 or (k - i) > n:\n                continue\n            a = max_subsequence(nums1, i)\n            b = max_subsequence(nums2, k - i)\n            merged = merge(a, b)\n            if merged > best:\n                best = merged\n        return best\n", "perfect-number": "import math\n\nclass Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        if num <= 1:\n            return False\n        \n        sum_divisors = 1  # 1 is a proper divisor\n        \n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                sum_divisors += i\n                other = num // i\n                if other != i:\n                    sum_divisors += other\n        \n        return sum_divisors == num\n", "fibonacci-number": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n", "dungeon-game": "class Solution:\n    def calculateMinimumHP(self, dungeon):\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1 - dungeon[i][j], 1)\n                else:\n                    if i == m-1:\n                        min_val = dp[i][j+1]\n                    elif j == n-1:\n                        min_val = dp[i+1][j]\n                    else:\n                        min_val = min(dp[i+1][j], dp[i][j+1])\n                    dp[i][j] = max(min_val - dungeon[i][j], 1)\n        \n        return dp[0][0]\n", "find-k-th-smallest-pair-distance": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        n = len(nums)\n        left = 0\n        right = nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            l = 0\n            \n            for r in range(n):\n                while nums[r] - nums[l] > mid:\n                    l += 1\n                count += r - l\n            \n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n", "number-of-segments-in-a-string": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return len(s.split())\n", "reverse-vowels-of-a-string": "class Solution(object):\n    def reverseVowels(self, s):\n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        vowels_in_s = [c for c in s if c in vowels]\n        reversed_vowels = vowels_in_s[::-1]\n        res = []\n        pointer = 0\n        for c in s:\n            if c in vowels:\n                res.append(reversed_vowels[pointer])\n                pointer += 1\n            else:\n                res.append(c)\n        return ''.join(res)\n", "longest-consecutive-sequence": "from typing import List\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        num_set = set(nums)\n        max_length = 0\n        \n        for num in num_set:\n            # Check if it's the start of a sequence\n            if num - 1 not in num_set:\n                current_num = num\n                current_length = 1\n                \n                # Count the length of the consecutive sequence\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_length += 1\n                \n                max_length = max(max_length, current_length)\n        \n        return max_length\n", "missing-number": "from typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)\n", "word-ladder": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return 0\n        queue = deque([(beginWord, 1)])\n        word_length = len(beginWord)\n        lower_chars = [chr(ord('a') + i) for i in range(26)]\n        \n        # Remove beginWord from wordSet if present\n        if beginWord in wordSet:\n            wordSet.remove(beginWord)\n        \n        while queue:\n            current_word, level = queue.popleft()\n            if current_word == endWord:\n                return level\n            # Generate all possible transformations\n            for i in range(word_length):\n                for c in lower_chars:\n                    if c == current_word[i]:\n                        continue\n                    # Create next word by changing the i-th character to c\n                    next_word = current_word[:i] + c + current_word[i+1:]\n                    if next_word in wordSet:\n                        queue.append((next_word, level + 1))\n                        wordSet.remove(next_word)\n        return 0\n", "add-binary": "class Solution(object):\n    def addBinary(self, a, b):\n        i = len(a) - 1\n        j = len(b) - 1\n        carry = 0\n        result = []\n        \n        while i >= 0 or j >= 0 or carry > 0:\n            total = carry\n            if i >= 0:\n                total += int(a[i])\n                i -= 1\n            if j >= 0:\n                total += int(b[j])\n                j -= 1\n            carry = total // 2\n            digit = total % 2\n            result.append(str(digit))\n        \n        # Reverse the result to get the correct order\n        return ''.join(reversed(result))\n", "find-first-and-last-position-of-element-in-sorted-array": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        def find_left():\n            low, high = 0, len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] < target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            if low < len(nums) and nums[low] == target:\n                return low\n            return -1\n        \n        def find_right():\n            low, high = 0, len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] > target:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            if high >= 0 and nums[high] == target:\n                return high\n            return -1\n        \n        left = find_left()\n        if left == -1:\n            return [-1, -1]\n        right = find_right()\n        return [left, right]\n", "remove-duplicates-from-sorted-array": "class Solution:\n    def removeDuplicates(self, nums):\n        index = 0\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1]:\n                index += 1\n                nums[index] = nums[i]\n        return index + 1\n", "jump-game-ii": "from typing import List\n\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        jumps = 0\n        current_end = 0\n        farthest = 0\n        for i in range(len(nums) - 1):\n            farthest = max(farthest, i + nums[i])\n            if i == current_end:\n                jumps += 1\n                current_end = farthest\n        return jumps\n", "best-time-to-buy-and-sell-stock-iv": "from typing import List\n\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if not prices or k == 0:\n            return 0\n        \n        n = len(prices)\n        if k >= n // 2:\n            # Unlimited transactions allowed\n            profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    profit += prices[i] - prices[i - 1]\n            return profit\n        \n        # Limited transactions allowed\n        dp = [[0] * n for _ in range(k + 1)]\n        \n        for t in range(1, k + 1):\n            max_diff = -prices[0]  # dp[t-1][0] - prices[0], which is 0 - prices[0] initially\n            for i in range(1, n):\n                # Compute current dp[t][i] using max_diff\n                current_profit = prices[i] + max_diff\n                dp[t][i] = max(dp[t][i - 1], current_profit)\n                # Update max_diff for next iteration\n                new_diff = dp[t - 1][i] - prices[i]\n                if new_diff > max_diff:\n                    max_diff = new_diff\n        \n        return dp[k][n - 1]\n", "convert-a-number-to-hexadecimal": "class Solution:\n    def toHex(self, num: int) -> str:\n        if num == 0:\n            return '0'\n        hex_chars = '0123456789abcdef'\n        if num < 0:\n            num += 2 ** 32\n        res = []\n        while num > 0:\n            remainder = num % 16\n            res.append(hex_chars[remainder])\n            num = num // 16\n        return ''.join(reversed(res))\n", "first-unique-character-in-a-string": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        # Dictionary to store frequency of each character\n        frequency = {}\n        \n        # First pass: count the frequency of each character\n        for char in s:\n            if char in frequency:\n                frequency[char] += 1\n            else:\n                frequency[char] = 1\n        \n        # Second pass: find the first character with frequency 1\n        for index, char in enumerate(s):\n            if frequency[char] == 1:\n                return index\n        \n        # If no unique character found, return -1\n        return -1\n", "contains-duplicate-iii": "from typing import List\n\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        if valueDiff < 0:\n            return False  # valueDiff is non-negative per constraints\n        \n        def get_bucket_id(x: int) -> int:\n            bucket_size = valueDiff + 1\n            # Using custom division to handle negative numbers correctly\n            if x >= 0:\n                return x // bucket_size\n            else:\n                return (x + 1) // bucket_size - 1\n        \n        buckets = {}\n        bucket_size = valueDiff + 1\n        \n        for i in range(len(nums)):\n            x = nums[i]\n            bucket_id = get_bucket_id(x)\n            \n            # Check if current bucket already has an element\n            if bucket_id in buckets:\n                return True\n            \n            # Check left adjacent bucket\n            if (bucket_id - 1) in buckets:\n                if abs(x - buckets[bucket_id - 1]) <= valueDiff:\n                    return True\n            \n            # Check right adjacent bucket\n            if (bucket_id + 1) in buckets:\n                if abs(x - buckets[bucket_id + 1]) <= valueDiff:\n                    return True\n            \n            # Add current element to its bucket\n            buckets[bucket_id] = x\n            \n            # Remove the element that is out of window\n            if i >= indexDiff:\n                y = nums[i - indexDiff]\n                y_bucket_id = get_bucket_id(y)\n                if y_bucket_id in buckets and buckets[y_bucket_id] == y:\n                    del buckets[y_bucket_id]\n        \n        return False\n", "sort-colors": "from typing import List\n\nclass Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        low = 0\n        high = len(nums) - 1\n        mid = 0\n        \n        while mid <= high:\n            if nums[mid] == 0:\n                nums[low], nums[mid] = nums[mid], nums[low]\n                low += 1\n                mid += 1\n            elif nums[mid] == 1:\n                mid += 1\n            else:\n                nums[mid], nums[high] = nums[high], nums[mid]\n                high -= 1\n", "max-consecutive-ones": "class Solution:\n    def findMaxConsecutiveOnes(self, nums):\n        max_count = 0\n        current_count = 0\n        \n        for num in nums:\n            if num == 1:\n                current_count += 1\n            else:\n                current_count = 0\n            \n            if current_count > max_count:\n                max_count = current_count\n        \n        return max_count\n", "count-complete-tree-nodes": "class Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        def depth(node):\n            count = 0\n            while node:\n                count += 1\n                node = node.left\n            return count\n        \n        left_depth = depth(root.left)\n        right_depth = depth(root.right)\n        \n        if left_depth == right_depth:\n            return (1 << left_depth) + self.countNodes(root.right)\n        else:\n            return (1 << right_depth) + self.countNodes(root.left)\n", "add-strings": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        result = []\n        \n        while i >= 0 or j >= 0 or carry != 0:\n            digit1 = int(num1[i]) if i >= 0 else 0\n            digit2 = int(num2[j]) if j >= 0 else 0\n            \n            total = digit1 + digit2 + carry\n            carry = total // 10\n            digit = total % 10\n            result.append(digit)\n            \n            i -= 1\n            j -= 1\n        \n        # Reverse the result to get the correct order and convert each digit to string\n        result.reverse()\n        return ''.join(str(d) for d in result)\n", "basic-calculator": "class Solution:\n    def calculate(self, s: str) -> int:\n        current_result = 0\n        num = 0\n        sign = 1\n        stack = []\n        \n        for c in s:\n            if c == ' ':\n                continue\n            elif c.isdigit():\n                num = num * 10 + int(c)\n            elif c == '+' or c == '-':\n                current_result += sign * num\n                num = 0\n                sign = 1 if c == '+' else -1\n            elif c == '(':\n                stack.append(current_result)\n                stack.append(sign)\n                current_result = 0\n                sign = 1\n            elif c == ')':\n                current_result += sign * num\n                num = 0\n                prev_sign = stack.pop()\n                prev_result = stack.pop()\n                current_result = prev_result + prev_sign * current_result\n        \n        current_result += sign * num\n        return current_result\n", "ipo": "import heapq\nfrom typing import List\n\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n        # Sort the projects by their capital requirements\n        projects = sorted(zip(capital, profits), key=lambda x: x[0])\n        max_heap = []\n        i = 0  # Pointer to track the next project to consider\n        n = len(projects)\n        \n        for _ in range(k):\n            # Push all projects that can be started with current w into the heap\n            while i < n and projects[i][0] <= w:\n                heapq.heappush(max_heap, -projects[i][1])  # Use negative to simulate max-heap\n                i += 1\n            \n            # If no projects can be started, break early\n            if not max_heap:\n                break\n            \n            # Select the project with maximum profit\n            w += -heapq.heappop(max_heap)\n        \n        return w\n", "valid-parentheses": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        \n        for char in s:\n            if char in bracket_map:\n                # Check if the stack is not empty and the top element matches\n                if not stack:\n                    return False\n                top = stack.pop()\n                if bracket_map[char] != top:\n                    return False\n            else:\n                stack.append(char)\n        \n        return not stack\n", "next-permutation": "from typing import List\n\nclass Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        k = -1\n        \n        # Step 1: Find the largest k such that nums[k] < nums[k+1]\n        for i in range(n-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                k = i\n                break\n        \n        # If no such k found, reverse the entire array\n        if k == -1:\n            nums[:] = nums[::-1]\n            return\n        \n        # Step 2: Find the largest l > k such that nums[l] > nums[k]\n        for l in range(n-1, k, -1):\n            if nums[l] > nums[k]:\n                # Swap k and l\n                nums[k], nums[l] = nums[l], nums[k]\n                break\n        \n        # Step 4: Reverse the subarray from k+1 to end\n        nums[k+1:] = nums[k+1:][::-1]\n        return\n", "contains-duplicate-ii": "from typing import List\n\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        last_occurrence = {}\n        for i in range(len(nums)):\n            num = nums[i]\n            if num in last_occurrence:\n                prev_index = last_occurrence[num]\n                if i - prev_index <= k:\n                    return True\n                # Update to the current index even if the previous wasn't within k\n                last_occurrence[num] = i\n            else:\n                last_occurrence[num] = i\n        return False\n", "maximum-gap": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        \n        min_val = min(nums)\n        max_val = max(nums)\n        \n        if min_val == max_val:\n            return 0\n        \n        # Calculate bucket size using ceiling division\n        bucket_size = (max_val - min_val + n - 2) // (n - 1)\n        \n        # Create buckets: each bucket tracks min and max of its elements\n        buckets = [{'min': float('inf'), 'max': float('-inf')} for _ in range(n - 1)]\n        \n        for num in nums:\n            # Compute bucket index and clamp to the last bucket if needed\n            bucket_idx = (num - min_val) // bucket_size\n            if bucket_idx > n - 2:\n                bucket_idx = n - 2\n            # Update bucket's min and max\n            if num < buckets[bucket_idx]['min']:\n                buckets[bucket_idx]['min'] = num\n            if num > buckets[bucket_idx]['max']:\n                buckets[bucket_idx]['max'] = num\n        \n        max_gap = 0\n        prev_max = min_val\n        \n        for bucket in buckets:\n            if bucket['min'] == float('inf'):\n                continue  # Skip empty bucket\n            current_gap = bucket['min'] - prev_max\n            if current_gap > max_gap:\n                max_gap = current_gap\n            prev_max = bucket['max']\n        \n        # Consider the gap between the last element and max_val\n        final_gap = max_val - prev_max\n        if final_gap > max_gap:\n            max_gap = final_gap\n        \n        return max_gap\n", "binary-tree-level-order-traversal": "from collections import deque\n\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        \n        queue = deque([root])\n        result = []\n        \n        while queue:\n            level_size = len(queue)\n            current_level = []\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                current_level.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(current_level)\n        \n        return result\n", "couples-holding-hands": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        class DSU:\n            def __init__(self, n):\n                self.parent = list(range(n))\n                self.size = [1] * n\n\n            def find(self, x):\n                if self.parent[x] != x:\n                    self.parent[x] = self.find(self.parent[x])\n                return self.parent[x]\n\n            def union(self, x, y):\n                x_root = self.find(x)\n                y_root = self.find(y)\n                if x_root == y_root:\n                    return\n                if self.size[x_root] < self.size[y_root]:\n                    x_root, y_root = y_root, x_root\n                self.parent[y_root] = x_root\n                self.size[x_root] += self.size[y_root]\n\n        n = len(row) // 2\n        dsu = DSU(n)\n        for i in range(0, len(row), 2):\n            c1 = row[i] // 2\n            c2 = row[i + 1] // 2\n            if c1 != c2:\n                dsu.union(c1, c2)\n        \n        seen = set()\n        total_swaps = 0\n        for x in range(n):\n            root = dsu.find(x)\n            if root not in seen:\n                seen.add(root)\n                component_size = dsu.size[root]\n                total_swaps += (component_size - 1)\n        return total_swaps\n", "interleaving-string": "from functools import lru_cache\n\nclass Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        @lru_cache(maxsize=None)\n        def dfs(i, j, next_s):\n            # Check if both s1 and s2 are exhausted\n            if i == len(s1) and j == len(s2):\n                return True\n            \n            # Determine the current position in s3\n            k = i + j\n            \n            if next_s == 0:\n                # Must take from s1\n                if i >= len(s1) or s1[i] != s3[k]:\n                    return False\n                # Try all possible lengths of the block from s1 starting at i\n                max_len = len(s1) - i\n                for l in range(1, max_len + 1):\n                    # Check if the substring matches\n                    end = i + l\n                    s1_sub = s1[i:end]\n                    s3_sub = s3[k:k + l]\n                    if s1_sub == s3_sub:\n                        # Proceed to s2 next\n                        if dfs(end, j, 1):\n                            return True\n                return False\n            else:\n                # Must take from s2\n                if j >= len(s2) or s2[j] != s3[k]:\n                    return False\n                # Try all possible lengths of the block from s2 starting at j\n                max_len = len(s2) - j\n                for l in range(1, max_len + 1):\n                    end = j + l\n                    s2_sub = s2[j:end]\n                    s3_sub = s3[k:k + l]\n                    if s2_sub == s3_sub:\n                        # Proceed to s1 next\n                        if dfs(i, end, 0):\n                            return True\n                return False\n        \n        # Check both possibilities: starting with s1 or s2\n        return dfs(0, 0, 0) or dfs(0, 0, 1)\n", "assign-cookies": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        g.sort()\n        s.sort()\n        i = 0  # Pointer for children\n        j = 0  # Pointer for cookies\n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                j += 1  # Move to the next cookie\n        \n        return count\n", "keyboard-row": "class Solution(object):\n    def findWords(self, words):\n        # Define the keyboard rows\n        rows = [\n            \"qwertyuiop\",\n            \"asdfghjkl\",\n            \"zxcvbnm\"\n        ]\n        \n        # Create a dictionary to map each character to its respective row\n        char_to_row = {}\n        for idx, row in enumerate(rows):\n            for c in row:\n                char_to_row[c] = idx\n        \n        result = []\n        for word in words:\n            lower_word = word.lower()\n            if not lower_word:\n                continue\n            # Determine the target row based on the first character\n            target_row = char_to_row.get(lower_word[0])\n            # Check all characters in the word belong to the target row\n            if all(char_to_row.get(c) == target_row for c in lower_word):\n                result.append(word)\n        \n        return result\n", "reverse-linked-list-ii": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseBetween(self, head: 'ListNode', left: int, right: int) -> 'ListNode':\n        dummy = ListNode(0, head)\n        pre = dummy\n        \n        # Move pre to the node before the left position\n        for _ in range(left - 1):\n            pre = pre.next\n        \n        # Start is the first node of the sublist to reverse\n        start = pre.next\n        current = start\n        prev = None\n        \n        # Reverse the sublist between left and right\n        for _ in range(right - left + 1):\n            temp = current.next\n            current.next = prev\n            prev = current\n            current = temp\n        \n        # Reconnect the reversed sublist back to the list\n        pre.next = prev\n        start.next = current\n        \n        return dummy.next\n", "shortest-palindrome": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        if not s:\n            return s\n        \n        rev_s = s[::-1]\n        new_s = s + '#' + rev_s\n        \n        n = len(new_s)\n        lps = [0] * n\n        \n        for i in range(1, n):\n            len_lps = lps[i-1]\n            while len_lps > 0 and new_s[i] != new_s[len_lps]:\n                len_lps = lps[len_lps - 1]\n            if new_s[i] == new_s[len_lps]:\n                len_lps += 1\n            lps[i] = len_lps\n        \n        l = lps[-1]\n        add_part = rev_s[:len(s) - l]\n        \n        return add_part + s\n", "minimum-window-substring": "from collections import defaultdict, Counter\n\nclass Solution(object):\n    def minWindow(self, s, t):\n        if not s or not t:\n            return \"\"\n        \n        t_counts = Counter(t)\n        required = len(t_counts)\n        window_counts = defaultdict(int)\n        have = 0\n        left = 0\n        min_len = float('inf')\n        result = (-1, -1)  # To store the start and end indices of the minimum window\n        \n        for right in range(len(s)):\n            char = s[right]\n            window_counts[char] += 1\n            \n            # Check if the current character's count meets the required count\n            if char in t_counts and window_counts[char] == t_counts[char]:\n                have += 1\n            \n            # Try to contract the window from the left while it remains valid\n            while have == required:\n                # Update the minimum window if current window is smaller\n                current_window_len = right - left + 1\n                if current_window_len < min_len:\n                    min_len = current_window_len\n                    result = (left, right)\n                \n                # Move the left pointer to the right\n                left_char = s[left]\n                window_counts[left_char] -= 1\n                if left_char in t_counts and window_counts[left_char] < t_counts[left_char]:\n                    have -= 1\n                left += 1\n        \n        return s[result[0]: result[1] + 1] if min_len != float('inf') else \"\"\n", "self-crossing": "from typing import List\n\nclass Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        n = len(distance)\n        for i in range(n):\n            # Case 1: current line crosses line[i-3]\n            if i >= 3:\n                if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                    return True\n            # Case 2: current line crosses line[i-4]\n            if i >= 4:\n                if distance[i-1] == distance[i-3] and (distance[i] + distance[i-4] >= distance[i-2]):\n                    return True\n            # Case 3: current line crosses line[i-5]\n            if i >= 5:\n                if (distance[i-1] <= distance[i-3] and \n                    distance[i-1] + distance[i-5] >= distance[i-3] and \n                    distance[i-2] > distance[i-4] and \n                    distance[i] >= distance[i-2] - distance[i-4]):\n                    return True\n        return False\n", "remove-duplicates-from-sorted-list": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        current = head\n        while current and current.next:\n            if current.val == current.next.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n        return head\n", "longest-palindrome": "import collections\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        count = collections.Counter(s)\n        max_length = 0\n        has_odd = False\n        \n        for freq in count.values():\n            if freq % 2 != 0:\n                has_odd = True\n            max_length += (freq // 2) * 2\n        \n        if has_odd:\n            max_length += 1\n        \n        return max_length\n", "construct-binary-tree-from-inorder-and-postorder-traversal": "from typing import List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        # Create a hash map to store the indices of inorder elements for quick lookup\n        index_map = {val: idx for idx, val in enumerate(inorder)}\n        # Call the helper function with initial indices\n        return self.build_tree_helper(inorder, 0, len(inorder) - 1, postorder, 0, len(postorder) - 1, index_map)\n    \n    def build_tree_helper(self, inorder: List[int], in_start: int, in_end: int, \n                          postorder: List[int], post_start: int, post_end: int, \n                          index_map: dict) -> TreeNode:\n        # Base case: if there are no elements to construct the subtree\n        if in_start > in_end:\n            return None\n        \n        # The root is the last element in postorder\n        root_val = postorder[post_end]\n        root = TreeNode(root_val)\n        \n        # Find the position of root in inorder to split the subtrees\n        root_index = index_map[root_val]\n        \n        # Calculate the size of the left subtree\n        left_size = root_index - in_start\n        \n        # Recursively build left and right subtrees\n        # For left subtree: new post_end is post_start + left_size - 1\n        left_post_end = post_start + left_size - 1\n        # For right subtree: new post_start is post_start + left_size, new post_end is post_end - 1\n        root.left = self.build_tree_helper(inorder, in_start, root_index - 1, \n                                           postorder, post_start, left_post_end, index_map)\n        root.right = self.build_tree_helper(inorder, root_index + 1, in_end, \n                                            postorder, post_start + left_size, post_end - 1, index_map)\n        \n        return root\n", "cut-off-trees-for-golf-event": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:\n        # Collect all trees with their positions and sort them by height\n        trees = []\n        m = len(forest)\n        if m == 0:\n            return 0\n        n = len(forest[0])\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        # Sort the trees based on their height\n        trees.sort(key=lambda x: x[0])\n        \n        # Starting position\n        current_x, current_y = 0, 0\n        total_steps = 0\n        \n        # Iterate through each tree in order and compute the minimal steps\n        for height, x, y in trees:\n            steps = self.bfs(forest, current_x, current_y, x, y)\n            if steps == -1:\n                return -1\n            total_steps += steps\n            current_x, current_y = x, y\n        \n        return total_steps\n    \n    def bfs(self, forest: List[List[int]], start_x: int, start_y: int, end_x: int, end_y: int) -> int:\n        rows = len(forest)\n        cols = len(forest[0])\n        visited = [[False for _ in range(cols)] for _ in range(rows)]\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right\n        \n        queue = deque()\n        queue.append((start_x, start_y, 0))\n        visited[start_x][start_y] = True\n        \n        while queue:\n            x, y, steps = queue.popleft()\n            if x == end_x and y == end_y:\n                return steps\n            \n            for dx, dy in directions:\n                nx = x + dx\n                ny = y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    if forest[nx][ny] != 0 and not visited[nx][ny]:\n                        visited[nx][ny] = True\n                        queue.append((nx, ny, steps + 1))\n        \n        return -1\n", "minimum-depth-of-binary-tree": "from collections import deque\n\nclass Solution(object):\n    def minDepth(self, root):\n        if not root:\n            return 0\n        \n        queue = deque([root])\n        depth = 1\n        \n        while queue:\n            level_size = len(queue)\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                \n                if not node.left and not node.right:\n                    return depth\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            depth += 1\n        \n        return depth\n", "count-of-range-sum": "class FenwickTree:\n    def __init__(self, size):\n        self.n = size\n        self.tree = [0] * (self.n + 1)  # Using 1-based indexing\n\n    def update(self, index, delta):\n        # Update the frequency at 'index' by adding 'delta'\n        while index <= self.n:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index):\n        # Return the sum of frequencies from 1 to 'index'\n        res = 0\n        while index > 0:\n            res += self.tree[index]\n            index -= index & -index\n        return res\n\n\nclass Solution:\n    def countRangeSum(self, nums, lower, upper):\n        # Compute the prefix sums\n        prefix_sums = [0]\n        for num in nums:\n            prefix_sums.append(prefix_sums[-1] + num)\n        \n        # Collect all values needed for coordinate compression\n        all_values = []\n        for s in prefix_sums:\n            all_values.append(s)\n            all_values.append(s - lower)\n            all_values.append(s - upper)\n        \n        # Deduplicate and sort the values to create rank mappings\n        sorted_unique = sorted(set(all_values))\n        rank_dict = {v: i + 1 for i, v in enumerate(sorted_unique)}  # 1-based ranking\n\n        # Initialize Fenwick Tree\n        ft_size = len(sorted_unique)\n        ft = FenwickTree(ft_size)\n\n        result = 0\n        for s in prefix_sums:\n            # Calculate the current query range [a, b]\n            a = s - upper\n            b = s - lower\n\n            # Get the ranks for a and b\n            rank_a = rank_dict[a]\n            rank_b = rank_dict[b]\n\n            # Count the number of elements in [a, b]\n            count = ft.query(rank_b) - ft.query(rank_a - 1)\n            result += count\n\n            # Insert the current prefix sum into the Fenwick Tree\n            s_rank = rank_dict[s]\n            ft.update(s_rank, 1)\n\n        return result\n", "arranging-coins": "import math\n\nclass Solution:\n    def arrangeCoins(self, n: int) -> int:\n        sqrt_val = math.isqrt(8 * n + 1)\n        return (sqrt_val - 1) // 2\n", "longest-uncommon-subsequence-i": "class Solution:\n    def findLUSlength(self, a: str, b: str) -> int:\n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))\n", "binary-tree-level-order-traversal-ii": "from collections import deque\nfrom typing import List, Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n        \n        levels = []\n        queue = deque([root])\n        \n        while queue:\n            level_size = len(queue)\n            current_level = []\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                current_level.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            levels.append(current_level)\n        \n        # Reverse the levels to get bottom-up traversal\n        return levels[::-1]\n", "palindrome-number": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        # Negative numbers are not palindromes\n        if x < 0:\n            return False\n        # If the number ends with 0 and is not zero itself, it's not a palindrome\n        if x % 10 == 0 and x != 0:\n            return False\n        \n        reversed_half = 0\n        while x > reversed_half:\n            reversed_half = reversed_half * 10 + (x % 10)\n            x = x // 10\n        \n        # Check for even length (x == reversed_half) and odd length (x == reversed_half // 10)\n        return x == reversed_half or x == reversed_half // 10\n", "decode-ways": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        n = len(s)\n        if n == 0:\n            return 0\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1  # empty string has one way\n        \n        # Initialize dp[1] based on the first character\n        dp[1] = 1 if s[0] != '0' else 0\n        \n        for i in range(2, n + 1):\n            # Check single digit (current character)\n            current = s[i-1]\n            if current != '0':\n                dp[i] += dp[i-1]\n            \n            # Check two digits (previous and current)\n            two_digit = int(s[i-2] + s[i-1])\n            if 10 <= two_digit <= 26:\n                dp[i] += dp[i-2]\n        \n        return dp[n]\n", "is-subsequence": "class Solution(object):\n    def isSubsequence(self, s, t):\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n", "gray-code": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [i ^ (i >> 1) for i in range(1 << n)]\n", "climbing-stairs": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        a, b = 1, 2\n        for i in range(3, n + 1):\n            current = a + b\n            a = b\n            b = current\n        return b\n", "word-break": "from typing import List\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        word_set = set(wordDict)\n        if not word_set:\n            return False\n        max_len = max(len(word) for word in word_set)\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True  # Empty string\n        \n        for i in range(1, n + 1):\n            start = max(0, i - max_len)\n            # Check all possible j from start to i-1\n            for j in range(start, i):\n                if dp[j] and s[j:i] in word_set:\n                    dp[i] = True\n                    break  # No need to check further\n        return dp[n]\n", "validate-binary-search-tree": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        stack = []\n        prev = None\n        while stack or root:\n            # Traverse to the leftmost node\n            while root:\n                stack.append(root)\n                root = root.left\n            # Visit the top node\n            root = stack.pop()\n            # Check if the current node's value is less than or equal to the previous node's value\n            if prev and root.val <= prev.val:\n                return False\n            # Update previous node to current node\n            prev = root\n            # Move to the right subtree\n            root = root.right\n        return True\n", "insert-interval": "from typing import List\n\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        s, e = newInterval\n        merged = [s, e]\n        left = []\n        right = []\n        \n        for interval in intervals:\n            if interval[1] < merged[0]:\n                left.append(interval)\n            elif interval[0] > merged[1]:\n                right.append(interval)\n            else:\n                # Merge with the current interval\n                merged[0] = min(merged[0], interval[0])\n                merged[1] = max(merged[1], interval[1])\n        \n        return left + [merged] + right\n", "palindrome-partitioning": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        n = len(s)\n        result = []\n        # Precompute a DP table to check palindromic substrings in O(1) time\n        dp = [[False] * n for _ in range(n)]\n        \n        # Fill the DP table\n        for i in range(n-1, -1, -1):\n            for j in range(i, n):\n                if s[i] == s[j]:\n                    if j - i < 2:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i+1][j-1]\n        \n        # Backtracking function to generate partitions\n        def backtrack(start, path):\n            if start == n:\n                result.append(list(path))\n                return\n            for end in range(start, n):\n                if dp[start][end]:\n                    path.append(s[start:end+1])\n                    backtrack(end + 1, path)\n                    path.pop()\n        \n        backtrack(0, [])\n        return result\n", "smallest-range-covering-elements-from-k-lists": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        merged = []\n        k = len(nums)\n        # Merge all elements with their corresponding list index\n        for i in range(k):\n            for num in nums[i]:\n                merged.append((num, i))\n        # Sort the merged list based on the element values\n        merged.sort()\n        \n        counts = defaultdict(int)\n        unique = 0  # Number of unique lists present in the current window\n        left = 0\n        min_len = float('inf')\n        best_start = -float('inf')\n        best_end = float('inf')\n        \n        for right in range(len(merged)):\n            current_val, list_id = merged[right]\n            # If this list's element is newly added to the window, increment unique\n            if counts[list_id] == 0:\n                unique += 1\n            counts[list_id] += 1\n            \n            # When all k lists are included in the window, try to shrink the window from the left\n            if unique == k:\n                # Move left as much as possible while maintaining the invariant\n                while counts[merged[left][1]] > 1:\n                    counts[merged[left][1]] -= 1\n                    left += 1\n                # Calculate the current window's start and end\n                window_start = merged[left][0]\n                window_end = merged[right][0]\n                window_length = window_end - window_start\n                \n                # Update the best window if current is smaller or same length but earlier start\n                if (window_length < min_len) or (window_length == min_len and window_start < best_start):\n                    min_len = window_length\n                    best_start = window_start\n                    best_end = window_end\n        \n        return [best_start, best_end]\n", "poor-pigs": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        if buckets == 1:\n            return 0\n        \n        T = minutesToTest // minutesToDie\n        if T == 0:\n            return 0  # This case is not possible under problem constraints\n        \n        x = 0\n        product = 1\n        base = T + 1\n        \n        while product < buckets:\n            product *= base\n            x += 1\n        \n        return x\n", "swim-in-rising-water": "from typing import List\nimport heapq\n\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        visited = [[float('inf')] * n for _ in range(n)]\n        visited[0][0] = grid[0][0]\n        heap = [(grid[0][0], 0, 0)]\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        while heap:\n            max_val, x, y = heapq.heappop(heap)\n            if x == n - 1 and y == n - 1:\n                return max_val\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    current_max = max(max_val, grid[nx][ny])\n                    if current_max < visited[nx][ny]:\n                        visited[nx][ny] = current_max\n                        heapq.heappush(heap, (current_max, nx, ny))\n        return -1\n", "unique-paths": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        k = min(m - 1, n - 1)\n        total = m + n - 2\n        res = 1\n        \n        for i in range(1, k + 1):\n            res = res * (total - k + i) // i\n        \n        return res\n", "multiply-strings": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        # Reverse both numbers to process from least significant digits\n        num1_reversed = num1[::-1]\n        num2_reversed = num2[::-1]\n        \n        m, n = len(num1_reversed), len(num2_reversed)\n        product = [0] * (m + n)\n        \n        # Multiply each digit of num1 by each digit of num2\n        for i in range(m):\n            digit1 = int(num1_reversed[i])\n            for j in range(n):\n                digit2 = int(num2_reversed[j])\n                product[i + j] += digit1 * digit2\n        \n        # Carry over the digits to ensure each position is less than 10\n        for k in range(len(product)):\n            carry = product[k] // 10\n            product[k] %= 10\n            if k + 1 < len(product):\n                product[k + 1] += carry\n        \n        # Convert the product array to the result string, trimming leading zeros\n        result = []\n        for digit in reversed(product):\n            if len(result) != 0 or digit != 0:\n                result.append(str(digit))\n        \n        return '0' if not result else ''.join(result)\n", "best-time-to-buy-and-sell-stock-iii": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        buy1 = buy2 = float('-inf')\n        sell1 = sell2 = 0\n        for price in prices:\n            buy1 = max(buy1, -price)\n            sell1 = max(sell1, buy1 + price)\n            buy2 = max(buy2, sell1 - price)\n            sell2 = max(sell2, buy2 + price)\n        return sell2\n", "combination-sum-ii": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        candidates.sort()\n        res = []\n        \n        def backtrack(start, path, curr_sum):\n            if curr_sum == target:\n                res.append(list(path))\n                return\n            for i in range(start, len(candidates)):\n                if curr_sum + candidates[i] > target:\n                    break\n                if i > start and candidates[i] == candidates[i - 1]:\n                    continue\n                path.append(candidates[i])\n                backtrack(i + 1, path, curr_sum + candidates[i])\n                path.pop()\n        \n        backtrack(0, [], 0)\n        return res\n", "detect-capital": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return (word == word.upper() or \n                word == word.lower() or \n                (word[0].isupper() and word[1:] == word[1:].lower()))\n", "best-time-to-buy-and-sell-stock": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        min_price = prices[0]\n        max_profit = 0\n        \n        for price in prices[1:]:\n            if price < min_price:\n                min_price = price\n            else:\n                profit = price - min_price\n                if profit > max_profit:\n                    max_profit = profit\n        \n        return max_profit\n", "binary-tree-inorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        stack = []\n        current = root\n        \n        while stack or current:\n            # Traverse to the leftmost node\n            while current:\n                stack.append(current)\n                current = current.left\n            \n            # Visit the top node\n            node = stack.pop()\n            result.append(node.val)\n            \n            # Move to the right subtree\n            current = node.right\n        \n        return result\n", "construct-binary-tree-from-preorder-and-inorder-traversal": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        if not preorder:\n            return None\n        # Create a hash map to store the indices of inorder elements\n        inorder_map = {val: idx for idx, val in enumerate(inorder)}\n        # Initialize pointer to track preorder elements\n        self.pointer = 0\n        \n        def helper(start, end):\n            if start > end:\n                return None\n            # Current root value from preorder\n            root_val = preorder[self.pointer]\n            self.pointer += 1\n            # Create the root node\n            root = TreeNode(root_val)\n            # Find the index in inorder\n            idx = inorder_map[root_val]\n            # Build left and right subtrees\n            root.left = helper(start, idx - 1)\n            root.right = helper(idx + 1, end)\n            return root\n        \n        return helper(0, len(inorder) - 1)\n", "remove-invalid-parentheses": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        def is_valid(string):\n            count = 0\n            for c in string:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            return count == 0\n        \n        visited = set()\n        queue = deque([s])\n        visited.add(s)\n        res = []\n        \n        while queue:\n            level_size = len(queue)\n            current_level = []\n            for _ in range(level_size):\n                current_level.append(queue.popleft())\n            # Check if any current strings are valid\n            for curr in current_level:\n                if is_valid(curr):\n                    res.append(curr)\n            if res:\n                return res\n            # Generate next level\n            for curr in current_level:\n                for i in range(len(curr)):\n                    if curr[i] in '()':\n                        new_str = curr[:i] + curr[i+1:]\n                        if new_str not in visited:\n                            visited.add(new_str)\n                            queue.append(new_str)\n        return [\"\"] if not res else res\n", "merge-k-sorted-lists": "import heapq\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists):\n        heap = []\n        count = 0\n        \n        # Initialize the heap with the first node of each non-empty list\n        for head in lists:\n            if head:\n                heapq.heappush(heap, (head.val, count, head))\n                count += 1\n        \n        # Create a dummy node to build the merged list\n        dummy = ListNode()\n        current = dummy\n        \n        # Process all elements in the heap\n        while heap:\n            val, cnt, node = heapq.heappop(heap)\n            current.next = node\n            current = node\n            \n            if node.next:\n                heapq.heappush(heap, (node.next.val, count, node.next))\n                count += 1\n        \n        return dummy.next\n", "palindrome-partitioning-ii": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        if n <= 1:\n            return 0\n        \n        # Precompute the palindrome table\n        pal = [[False] * n for _ in range(n)]\n        for j in range(n):\n            for i in range(j + 1):\n                if i == j:\n                    pal[i][j] = True\n                elif j == i + 1:\n                    pal[i][j] = (s[i] == s[j])\n                else:\n                    pal[i][j] = (s[i] == s[j] and pal[i + 1][j - 1])\n        \n        # Initialize the dp array where dp[i] is the min cuts for s[0..i-1]\n        dp = [float('inf')] * (n + 1)\n        dp[0] = -1  # Base case to handle single palindrome splits\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if pal[j][i - 1]:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        \n        return dp[n]\n", "preimage-size-of-factorial-zeroes-function": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def trailing_zeros(x):\n            count = 0\n            while x > 0:\n                x = x // 5\n                count += x\n            return count\n        \n        def lower_bound(target):\n            low = 0\n            high = 5 * (target + 1)\n            while low < high:\n                mid = (low + high) // 2\n                z = trailing_zeros(mid)\n                if z < target:\n                    low = mid + 1\n                else:\n                    high = mid\n            return low\n        \n        L = lower_bound(k)\n        if trailing_zeros(L) != k:\n            return 0\n        R = lower_bound(k + 1)\n        return R - L\n", "palindrome-pairs": "from typing import List\n\nclass Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        word_map = {word: i for i, word in enumerate(words)}\n        res = set()\n        \n        for i, word in enumerate(words):\n            rev = word[::-1]\n            \n            # Case 1: Check if the reversed word itself exists in the map\n            if rev in word_map and word_map[rev] != i:\n                j = word_map[rev]\n                res.add((i, j))\n                res.add((j, i))\n            \n            # Case 2: Split reversed word into prefix and suffix\n            for k in range(1, len(rev) + 1):\n                left = rev[:k]\n                right = rev[k:]\n                \n                # Check if right part is a palindrome and prefix exists in the map\n                if self.is_palindrome(right) and left in word_map:\n                    if word_map[left] != i:\n                        res.add((i, word_map[left]))\n                \n                # Check if left part is a palindrome and suffix exists in the map\n                if self.is_palindrome(left) and right in word_map:\n                    if word_map[right] != i:\n                        res.add((word_map[right], i))\n        \n        return [list(pair) for pair in res]\n    \n    def is_palindrome(self, s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] != s[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n", "convert-sorted-array-to-binary-search-tree": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n        \nfrom typing import List, Optional\n\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        def helper(left: int, right: int) -> Optional[TreeNode]:\n            if left > right:\n                return None\n            mid: int = (left + right) // 2\n            node: TreeNode = TreeNode(nums[mid])\n            node.left = helper(left, mid - 1)\n            node.right = helper(mid + 1, right)\n            return node\n        \n        return helper(0, len(nums) - 1)\n", "contain-virus": "from collections import deque\n\nclass Solution:\n    def containVirus(self, isInfected):\n        m = len(isInfected)\n        if m == 0:\n            return 0\n        n = len(isInfected[0])\n        if n == 0:\n            return 0\n        \n        walls = set()\n        total_walls = 0\n        \n        while True:\n            # Step 1: Find all regions using BFS\n            visited = [[False for _ in range(n)] for _ in range(m)]\n            regions = []\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1 and not visited[i][j]:\n                        queue = deque()\n                        queue.append((i, j))\n                        visited[i][j] = True\n                        region = [(i, j)]\n                        while queue:\n                            x, y = queue.popleft()\n                            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                                nx = x + dx\n                                ny = y + dy\n                                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and isInfected[nx][ny] == 1:\n                                    # Check if there is a wall between (x,y) and (nx,ny)\n                                    a = (x, y)\n                                    b = (nx, ny)\n                                    if a < b:\n                                        edge = (a, b)\n                                    else:\n                                        edge = (b, a)\n                                    if edge not in walls:\n                                        visited[nx][ny] = True\n                                        queue.append((nx, ny))\n                                        region.append((nx, ny))\n                        regions.append(region)\n            \n            # Step 2: Compute threatened cells for each region\n            threat_list = []\n            for region in regions:\n                threatened = set()\n                for (x, y) in region:\n                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        nx = x + dx\n                        ny = y + dy\n                        if 0 <= nx < m and 0 <= ny < n and isInfected[nx][ny] == 0:\n                            a = (x, y)\n                            b = (nx, ny)\n                            if a < b:\n                                edge = (a, b)\n                            else:\n                                edge = (b, a)\n                            if edge not in walls:\n                                threatened.add((nx, ny))\n                threat_list.append(threatened)\n            \n            # Step 3: Check if any threat exists\n            max_threat = -1\n            idx = -1\n            for i in range(len(threat_list)):\n                current_len = len(threat_list[i])\n                if current_len > max_threat:\n                    max_threat = current_len\n                    idx = i\n            if max_threat == 0:\n                break  # No more threats\n            \n            # Step 4: Add walls for the selected region\n            walls_to_add = set()\n            selected_region = regions[idx]\n            threat_set = threat_list[idx]\n            for (x, y) in selected_region:\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx = x + dx\n                    ny = y + dy\n                    if 0 <= nx < m and 0 <= ny < n and (nx, ny) in threat_set:\n                        a = (x, y)\n                        b = (nx, ny)\n                        if a < b:\n                            edge = (a, b)\n                        else:\n                            edge = (b, a)\n                        walls_to_add.add(edge)\n            total_walls += len(walls_to_add)\n            walls.update(walls_to_add)\n            \n            # Step 5: Spread the virus from other regions\n            spread_cells = set()\n            for i in range(len(regions)):\n                if i != idx:\n                    spread_cells.update(threat_list[i])\n            for (x, y) in spread_cells:\n                isInfected[x][y] = 1\n        \n        return total_walls\n", "longest-increasing-path-in-a-matrix": "from typing import List\n\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        dp = [[1] * cols for _ in range(rows)]\n        \n        cells = []\n        for i in range(rows):\n            for j in range(cols):\n                cells.append((matrix[i][j], i, j))\n        cells.sort()\n        \n        for val, i, j in cells:\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                x, y = i + dx, j + dy\n                if 0 <= x < rows and 0 <= y < cols and matrix[x][y] < val:\n                    dp[i][j] = max(dp[i][j], dp[x][y] + 1)\n        \n        return max(max(row) for row in dp)\n", "number-of-digit-one": "class Solution(object):\n    def countDigitOne(self, n):\n        count = 0\n        weight = 1\n        while weight <= n:\n            high = n // (weight * 10)\n            current = (n // weight) % 10\n            low = n % weight\n            \n            if current > 1:\n                count += (high + 1) * weight\n            elif current == 1:\n                count += high * weight + low + 1\n            else:\n                count += high * weight\n            \n            weight *= 10\n        \n        return count\n", "word-break-ii": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        from collections import defaultdict\n        \n        if not wordDict:\n            return []\n        \n        word_set = set(wordDict)\n        max_len = max(len(word) for word in word_set)\n        memo = {}\n        \n        def dfs(start):\n            if start in memo:\n                return memo[start]\n            res = []\n            # Check all possible end positions for the current start\n            max_end = min(start + max_len, len(s))\n            for end in range(start + 1, max_end + 1):\n                word = s[start:end]\n                if word in word_set:\n                    if end == len(s):\n                        res.append(word)\n                    else:\n                        sub_sentences = dfs(end)\n                        for sub_sentence in sub_sentences:\n                            res.append(word + \" \" + sub_sentence)\n            memo[start] = res\n            return res\n        \n        return dfs(0)\n", "binary-tree-zigzag-level-order-traversal": "from collections import deque\nfrom typing import Optional, List\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        result = []\n        if not root:\n            return result\n        \n        queue = deque([root])\n        level = 0\n        \n        while queue:\n            current_level_size = len(queue)\n            current_level_nodes = []\n            \n            for _ in range(current_level_size):\n                node = queue.popleft()\n                current_level_nodes.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            if level % 2 == 0:\n                result.append(current_level_nodes)\n            else:\n                result.append(current_level_nodes[::-1])\n            \n            level += 1\n        \n        return result\n", "binary-watch": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        if turnedOn > 8:\n            return []\n        res = []\n        for hour in range(12):\n            hour_bits = bin(hour).count('1')\n            for minute in range(60):\n                minute_bits = bin(minute).count('1')\n                if hour_bits + minute_bits == turnedOn:\n                    res.append(f\"{hour}:{minute:02d}\")\n        return res\n", "pascals-triangle": "from typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        result = []\n        for i in range(numRows):\n            if i == 0:\n                result.append([1])\n            else:\n                prev_row = result[i - 1]\n                new_row = [1]\n                for j in range(1, len(prev_row)):\n                    new_val = prev_row[j - 1] + prev_row[j]\n                    new_row.append(new_val)\n                new_row.append(1)\n                result.append(new_row)\n        return result\n", "power-of-three": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        return n > 0 and (3**19) % n == 0\n", "binary-tree-maximum-path-sum": "class Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        self.max_sum = float('-inf')\n        \n        def helper(node):\n            if not node:\n                return 0\n            \n            left_gain = helper(node.left)\n            right_gain = helper(node.right)\n            \n            # Calculate the current candidate path sum, considering positive gains only\n            current_candidate = node.val + max(left_gain, 0) + max(right_gain, 0)\n            self.max_sum = max(self.max_sum, current_candidate)\n            \n            # Determine the gain to return to the parent node\n            gain_to_parent = node.val + max(left_gain, right_gain, 0)\n            return gain_to_parent\n        \n        helper(root)\n        return self.max_sum\n", "trapping-rain-water-ii": "from typing import List\nimport heapq\n\nclass Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        if not heightMap or len(heightMap) < 3:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False] * n for _ in range(m)]\n        heap = []\n        \n        # Add all perimeter cells to the heap\n        # First and last columns\n        for i in range(m):\n            for j in [0, n-1]:\n                if not visited[i][j]:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited[i][j] = True\n        \n        # First and last rows (excluding first and last columns)\n        for j in range(1, n-1):\n            for i in [0, m-1]:\n                if not visited[i][j]:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited[i][j] = True\n        \n        dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        water = 0\n        \n        while heap:\n            h, x, y = heapq.heappop(heap)\n            for dx, dy in dirs:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    neighbor_h = heightMap[nx][ny]\n                    if neighbor_h < h:\n                        water += h - neighbor_h\n                    heapq.heappush(heap, (max(h, neighbor_h), nx, ny))\n        \n        return water\n", "valid-palindrome": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        processed = [c.lower() for c in s if c.isalnum()]\n        return processed == processed[::-1]\n", "sliding-window-median": "import bisect\n\nclass BIT:\n    def __init__(self, size):\n        self.n = size\n        self.tree = [0] * (self.n + 1)\n    \n    def update(self, idx, delta):\n        while idx <= self.n:\n            self.tree[idx] += delta\n            idx += idx & -idx\n    \n    def query(self, idx):\n        res = 0\n        while idx > 0:\n            res += self.tree[idx]\n            idx -= idx & -idx\n        return res\n\nclass Solution:\n    def medianSlidingWindow(self, nums, k):\n        sorted_n = sorted(nums)\n        sorted_unique = []\n        prev = None\n        for num in sorted_n:\n            if num != prev:\n                sorted_unique.append(num)\n                prev = num\n        m = len(sorted_unique)\n        if m == 0:\n            return []\n        bit = BIT(m)\n        \n        def find_rank(x):\n            return bisect.bisect_left(sorted_unique, x) + 1\n        \n        result = []\n        n = len(nums)\n        \n        def find_kth(s):\n            low, high = 1, m\n            while low < high:\n                mid = (low + high) // 2\n                cnt = bit.query(mid)\n                if cnt < s:\n                    low = mid + 1\n                else:\n                    high = mid\n            return low\n        \n        for i in range(n):\n            x = nums[i]\n            r = find_rank(x)\n            bit.update(r, 1)\n            \n            if i >= k:\n                y = nums[i - k]\n                ry = find_rank(y)\n                bit.update(ry, -1)\n            \n            if i >= k - 1:\n                if k % 2 == 1:\n                    s = (k + 1) // 2\n                    rank = find_kth(s)\n                    median = sorted_unique[rank - 1]\n                else:\n                    s1 = k // 2\n                    s2 = s1 + 1\n                    rank1 = find_kth(s1)\n                    rank2 = find_kth(s2)\n                    val1 = sorted_unique[rank1 - 1]\n                    val2 = sorted_unique[rank2 - 1]\n                    median = (val1 + val2) / 2.0\n                result.append(float(median))\n        \n        return result\n", "rotate-list": "class Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        # Handle edge cases where rotation is unnecessary\n        if not head or not head.next:\n            return head\n        \n        # Calculate the length of the list and find the tail node\n        current = head\n        n = 1\n        while current.next:\n            n += 1\n            current = current.next\n        tail = current\n        \n        # Determine the effective number of rotations\n        new_k = k % n\n        if new_k == 0:\n            return head\n        \n        # Find the node that will be the new tail\n        steps = n - new_k - 1\n        current = head\n        for _ in range(steps):\n            current = current.next\n        \n        # The next node is the new head\n        new_head = current.next\n        # Split the list\n        current.next = None\n        # Connect the tail to the original head\n        tail.next = head\n        \n        return new_head\n", "ugly-number": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        if n <= 0:\n            return False\n        if n == 1:\n            return True\n        for factor in [2, 3, 5]:\n            while n % factor == 0:\n                n //= factor\n        return n == 1\n", "falling-squares": "class Solution(object):\n    def fallingSquares(self, positions):\n        existing = []\n        ans = []\n        current_max = 0\n        for left, side in positions:\n            new_left = left\n            new_right = left + side\n            base = 0\n            # Check all existing squares for overlaps\n            for s, e, h in existing:\n                if s < new_right and new_left < e:\n                    base = max(base, h)\n            new_height = base + side\n            existing.append((new_left, new_right, new_height))\n            if new_height > current_max:\n                current_max = new_height\n            ans.append(current_max)\n        return ans\n", "sum-of-left-leaves": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        def helper(node: TreeNode, is_left: bool) -> int:\n            if not node:\n                return 0\n            # Check if current node is a leaf and a left child\n            if not node.left and not node.right and is_left:\n                return node.val\n            # Recursively check left and right children\n            return helper(node.left, True) + helper(node.right, False)\n        return helper(root, False)\n", "max-sum-of-rectangle-no-larger-than-k": "matrix = [[1, 0, 1], [0, -2, 3]]\nk = 2\n", "divide-two-integers": "class Solution(object):\n    def divide(self, dividend, divisor):\n        # Handle the overflow case first\n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        # Determine the sign of the result\n        sign = -1 if ((dividend < 0) ^ (divisor < 0)) else 1\n        \n        dividend_abs = abs(dividend)\n        divisor_abs = abs(divisor)\n        \n        quotient = 0\n        \n        while dividend_abs >= divisor_abs:\n            # Determine the maximum shift\n            max_shift = 0\n            temp = divisor_abs\n            while temp <= dividend_abs:\n                temp <<= 1\n                max_shift += 1\n            shift = max_shift - 1\n            \n            # Update quotient and dividend_abs\n            quotient += 1 << shift\n            dividend_abs -= divisor_abs << shift\n        \n        result = sign * quotient\n        \n        # Clamp to 32-bit signed integer range\n        INT_MIN = -2**31\n        INT_MAX = 2**31 - 1\n        \n        if result < INT_MIN:\n            return INT_MIN\n        elif result > INT_MAX:\n            return INT_MAX\n        else:\n            return result\n", "surrounded-regions": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # Process first and last rows\n        for i in [0, m - 1]:\n            for j in range(n):\n                if board[i][j] == 'O':\n                    self.bfs(board, i, j, m, n)\n        \n        # Process first and last columns, excluding first and last rows\n        for j in [0, n - 1]:\n            for i in range(1, m - 1):\n                if board[i][j] == 'O':\n                    self.bfs(board, i, j, m, n)\n        \n        # Flip the remaining O's to X's and T's back to O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'\n    \n    def bfs(self, board: List[List[str]], i: int, j: int, m: int, n: int) -> None:\n        queue = deque([(i, j)])\n        board[i][j] = 'T'  # Mark as visited\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and board[nx][ny] == 'O':\n                    board[nx][ny] = 'T'\n                    queue.append((nx, ny))\n", "two-sum": "from typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        seen = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in seen:\n                return [seen[complement], i]\n            seen[num] = i\n        return []\n", "24-game": "from typing import List\n\nclass Solution:\n    def judgePoint24(self, cards: List[int]) -> bool:\n        return self.backtrack(cards.copy())\n    \n    def backtrack(self, nums: List[float]) -> bool:\n        if len(nums) == 1:\n            return abs(nums[0] - 24) < 1e-6\n        \n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i == j:\n                    continue\n                \n                # Generate new list excluding nums[i] and nums[j]\n                new_nums = []\n                for k in range(len(nums)):\n                    if k != i and k != j:\n                        new_nums.append(nums[k])\n                \n                # Try all four operations\n                # Addition\n                new_nums.append(nums[i] + nums[j])\n                if self.backtrack(new_nums):\n                    return True\n                new_nums.pop()\n                \n                # Subtraction\n                new_nums.append(nums[i] - nums[j])\n                if self.backtrack(new_nums):\n                    return True\n                new_nums.pop()\n                \n                # Multiplication\n                new_nums.append(nums[i] * nums[j])\n                if self.backtrack(new_nums):\n                    return True\n                new_nums.pop()\n                \n                # Division\n                if abs(nums[j]) > 1e-6:\n                    new_nums.append(nums[i] / nums[j])\n                    if self.backtrack(new_nums):\n                        return True\n                    new_nums.pop()\n        \n        return False\n", "wildcard-matching": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        # Preprocess the pattern to collapse consecutive '*' into a single '*'\n        processed_p = []\n        prev_char = None\n        for c in p:\n            if c == '*' and prev_char == '*':\n                continue\n            processed_p.append(c)\n            prev_char = c\n        p = ''.join(processed_p)\n        \n        m, n = len(s), len(p)\n        \n        # Initialize DP table with previous row\n        dp_prev = [False] * (n + 1)\n        dp_prev[0] = True  # Empty pattern matches empty string\n        \n        # Fill first row (i=0, s is empty)\n        for j in range(1, n + 1):\n            if p[j - 1] == '*':\n                dp_prev[j] = dp_prev[j - 1]\n  )\n        \n        # Fill the DP table row by row\n        for i in range(1, m + 1):\n            curr = [False] * (n + 1)\n            for j in range(1, n + 1):\n                # Check if current characters match or have a '?'\n                if p[j - 1] == '?' or p[j - 1] == s[i - 1]:\n                    curr[j] = dp_prev[j - 1]\n                elif p[j - 1] == '*':\n                    # '*' can act as 0 or more characters\n                    curr[j] = curr[j - 1] or dp_prev[j]\n                # else: curr[j] remains False by default\n            dp_prev = curr\n        \n        return dp_prev[n]\n", "majority-element": "class Solution(object):\n    def majorityElement(self, nums):\n        count = 0\n        candidate = None\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if num == candidate else -1\n        return candidate\n", "reconstruct-itinerary": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n        \n        # Build the graph with reverse sorted adjacency lists\n        for src, dst in tickets:\n            graph[src].append(dst)\n        for city in graph:\n            graph[city].sort(reverse=True)  # sort in reverse lex order\n        \n        path = []\n        \n        def dfs(node):\n            # Visit all edges (lexicographical smallest order)\n            while graph[node]:\n                next_node = graph[node].pop()\n                dfs(next_node)\n            path.append(node)\n        \n        dfs('JFK')\n        return path[::-1]\n", "4sum": "from typing import List\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        res = []\n        \n        for i in range(n - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            for j in range(i + 1, n - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                \n                left, right = j + 1, n - 1\n                target2 = target - nums[i] - nums[j]\n                \n                while left < right:\n                    sum2 = nums[left] + nums[right]\n                    \n                    if sum2 == target2:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        # Skip duplicates for left\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        # Skip duplicates for right\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif sum2 < target2:\n                        left += 1\n                    else:\n                        right -= 1\n        \n        return res\n", "the-skyline-problem": "import heapq\nfrom typing import List\n\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        events = []\n        # Generate start and end events for each building\n        for left, right, height in buildings:\n            events.append((left, -height, right))  # Start event\n            events.append((right, 0, 0))           # End event\n        \n        events.sort()  # Sort events by x, then by secondary criteria\n        \n        res = []\n        heap = []  # Max-heap (simulated using min-heap with negative heights)\n        prev_h = 0\n        i = 0\n        n = len(events)\n        \n        while i < n:\n            current_x = events[i][0]\n            \n            # Clean up the heap: remove expired elements with end <= current_x\n            while heap and heap[0][1] <= current_x:\n                heapq.heappop(heap)\n            \n            # Process all events with the same x-coordinate\n            while i < n and events[i][0] == current_x:\n                event = events[i]\n                h = event[1]\n                if h != 0:  # Start event: add to heap\n                    height = -h\n                    end = event[2]\n                    heapq.heappush(heap, (h, end))\n                i += 1\n            \n            # Determine current height\n            current_h = -heap[0][0] if heap else 0\n            \n            # If the current height differs from the previous, record the key point\n            if current_h != prev_h:\n                res.append([current_x, current_h])\n                prev_h = current_h\n        \n        return res\n", "reverse-string": "class Solution:\n    def reverseString(self, s):\n        \"\"\"\n        Reverses the input list of characters in-place using O(1) extra memory.\n        \n        :type s: List[str]\n        :rtype: None. The list is modified in-place.\n        \"\"\"\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n", "reverse-linked-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        prev = None\n        current = head\n        while current:\n            next_node = current.next\n            current.next = prev\n            prev = current\n            current = next_node\n        return prev\n", "triangle": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        n = len(triangle)\n        dp = triangle[-1].copy()\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+1):\n                dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n        \n        return dp[0]\n", "integer-to-english-words": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\",\n                \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\",\n                \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\",\n                \"Ninety\"]\n        thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n        \n        def helper(n):\n            if n == 0:\n                return \"\"\n            if n < 20:\n                return ones[n]\n            elif n < 100:\n                ten = tens[n // 10]\n                one = ones[n % 10]\n                return f\"{ten} {one}\" if one != \"\" else ten\n            else:\n                hundred = ones[n // 100]\n                rest = helper(n % 100)\n                return f\"{hundred} Hundred {rest}\".strip() if rest != \"\" else f\"{hundred} Hundred\"\n        \n        res = []\n        i = 0\n        current = num\n        \n        while current > 0:\n            group = current % 1000\n            if group != 0:\n                chunk = helper(group)\n                suffix = thousands[i]\n                if suffix:\n                    chunk += \" \" + suffix\n                res.append(chunk)\n            current //= 1000\n            i += 1\n        \n        return ' '.join(reversed(res))\n", "k-inverse-pairs-array": "class Solution(object):\n    def kInversePairs(self, n, k):\n        MOD = 10**9 + 7\n        max_k = 1000\n        prev = [0] * (max_k + 1)\n        prev[0] = 1  # Base case: 1 permutation (the empty array) with 0 inverses\n        \n        for i in range(2, n + 1):\n            curr = [0] * (max_k + 1)\n            # Compute prefix sums of prev array\n            prefix = [0] * (max_k + 1)\n            prefix[0] = prev[0]\n            for j in range(1, max_k + 1):\n                prefix[j] = (prefix[j-1] + prev[j]) % MOD\n            \n            # Fill current row curr[j]\n            for j in range(0, max_k + 1):\n                lower = max(0, j - (i - 1))\n                upper = j\n                if lower == 0:\n                    sum_val = prefix[upper]\n                else:\n                    sum_val = (prefix[upper] - prefix[lower - 1]) % MOD\n                curr[j] = sum_val\n            \n            prev = curr  # Move to next i\n        \n        return prev[k] % MOD if k <= 1000 else 0\n", "swap-nodes-in-pairs": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        current = dummy\n        \n        while current.next and current.next.next:\n            a = current.next\n            b = current.next.next\n            temp = b.next\n            \n            b.next = a\n            current.next = b\n            a.next = temp\n            \n            current = a\n        \n        return dummy.next\n", "path-sum": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def hasPathSum(self, root: 'TreeNode', targetSum: int) -> bool:\n        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)\n", "partition-list": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        # Create dummy heads for the left and right partitions\n        left_head = ListNode(0)\n        right_head = ListNode(0)\n        left = left_head\n        right = right_head\n        current = head\n        \n        # Traverse the original list and partition nodes into left and right\n        while current:\n            next_node = current.next  # Save the next node early\n            if current.val < x:\n                # Append to left partition\n                left.next = current\n                left = current\n                current.next = None  # Break the original link to prevent cycles\n            else:\n                # Append to right partition\n                right.next = current\n                right = current\n                current.next = None  # Break the original link to prevent cycles\n            current = next_node\n        \n        # Link the end of the left partition to the start of the right partition\n        left.next = right_head.next\n        \n        # Return the new head of the partitioned list\n        return left_head.next\n", "redundant-connection-ii": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        parent = dict()\n        conflict_index = -1\n        n = len(edges)\n        \n        # Check for a node with two parents (conflict)\n        for i, (u, v) in enumerate(edges):\n            if v in parent:\n                conflict_index = i\n                break\n            parent[v] = u\n        \n        # Case 1: There is a conflict, need to resolve which edge to remove\n        if conflict_index != -1:\n            v = edges[conflict_index][1]\n            u1 = parent[v]\n            u2 = edges[conflict_index][0]\n            edge1 = [u1, v]\n            edge2 = [u2, v]\n            \n            # Helper function to check if removing skip_edge results in a valid tree\n            def is_valid(skip_edge):\n                parents = {}\n                children = defaultdict(list)\n                \n                for i, (u, v_edge) in enumerate(edges):\n                    if edges[i] == skip_edge:\n                        continue\n                    # Check if this v_edge already has a parent (should not happen in valid tree)\n                    if v_edge in parents:\n                        return False\n                    parents[v_edge] = u\n                    children[u].append(v_edge)\n                \n                # Check for exactly one root (node without parent)\n                root_candidates = [node for node in range(1, n+1) if node not in parents]\n                if len(root_candidates) != 1:\n                    return False\n                root = root_candidates[0]\n                \n                # Check connectivity via DFS\n                visited = set()\n                stack = [root]\n                visited.add(root)\n                while stack:\n                    node = stack.pop()\n                    for child in children[node]:\n                        if child not in visited:\n                            visited.add(child)\n                            stack.append(child)\n                \n                return len(visited) == n\n            \n            # Check if removing the second (later) edge works\n            if is_valid(edge2):\n                return edge2\n            else:\n                return edge1\n        \n        # Case 2: No conflict, find the last edge in the cycle\n        else:\n            # Rebuild parent dict including all edges\n            parent = {}\n            for u, v in edges:\n                parent[v] = u\n            \n            # Find a node in the cycle\n            visited = set()\n            current_path = []\n            node = 1  # Starting from node 1\n            while True:\n                if node not in parent:\n                    break  # Should not happen in case 2\n                if node in visited:\n                    break\n                visited.add(node)\n                current_path.append(node)\n                node = parent[node]\n            \n            # Collect nodes in the cycle\n            cycle_set = set()\n            current = node\n            while True:\n                cycle_set.add(current)\n                current = parent[current]\n                if current == node:\n                    break\n            \n            # Find the last edge in edges that is part of the cycle\n            last_index = -1\n            for i, (u, v) in enumerate(edges):\n                if v in cycle_set and parent[v] == u:\n                    if i > last_index:\n                        last_index = i\n            return edges[last_index]\n", "permutations-ii": "from typing import List\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        used = [False] * len(nums)\n        result = []\n        \n        def backtrack(path):\n            if len(path) == len(nums):\n                result.append(list(path))\n                return\n            for i in range(len(nums)):\n                if used[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not used[i-1]:\n                    continue\n                used[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                used[i] = False\n        \n        backtrack([])\n        return result\n", "add-digits": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        mod = num % 9\n        return 9 if mod == 0 else mod\n", "single-number": "class Solution:\n    def singleNumber(self, nums):\n        res = 0\n        for num in nums:\n            res ^= num\n        return res\n", "length-of-last-word": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return len(s.split()[-1])\n", "cherry-pickup": "class Solution(object):\n    def cherryPickup(self, grid):\n        n = len(grid)\n        dp_prev = [[-float('inf')] * n for _ in range(n)]\n        dp_prev[0][0] = grid[0][0] if grid[0][0] != -1 else -float('inf')\n        \n        for t in range(1, 2 * n - 1):\n            dp_curr = [[-float('inf')] * n for _ in range(n)]\n            # Iterate all possible positions (x1, x2) at step t\n            for x1 in range(n):\n                y1 = t - x1\n                if y1 < 0 or y1 >= n or grid[x1][y1] == -1:\n                    continue\n                for x2 in range(n):\n                    y2 = t - x2\n                    if y2 < 0 or y2 >= n or grid[x2][y2] == -1:\n                        continue\n                    \n                    # Calculate current cherry collection\n                    if x1 == x2 and y1 == y2:\n                        collect = grid[x1][y1]\n                    else:\n                        collect = grid[x1][y1] + grid[x2][y2]\n                    \n                    # Generate previous position candidates for both paths\n                    x1_prev_candidates = []\n                    if x1 > 0 and grid[x1-1][y1] != -1:\n                        x1_prev_candidates.append(x1 - 1)\n                    if y1 > 0 and grid[x1][y1-1] != -1:\n                        x1_prev_candidates.append(x1)\n                    \n                    x2_prev_candidates = []\n                    if x2 > 0 and grid[x2-1][y2] != -1:\n                        x2_prev_candidates.append(x2 - 1)\n                    if y2 > 0 and grid[x2][y2-1] != -1:\n                        x2_prev_candidates.append(x2)\n                    \n                    # Find maximum previous value from valid transitions\n                    max_val = -float('inf')\n                    for p1 in x1_prev_candidates:\n                        for p2 in x2_prev_candidates:\n                            if dp_prev[p1][p2] > max_val:\n                                max_val = dp_prev[p1][p2]\n                    \n                    if max_val != -float('inf'):\n                        dp_curr[x1][x2] = max_val + collect\n            \n            dp_prev = dp_curr\n        \n        result = dp_prev[n-1][n-1]\n        return max(0, result) if result != -float('inf') else 0\n", "student-attendance-record-ii": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        MOD = 10**9 + 7\n        \n        # Initial states for a=0 (0 absences)\n        prev00 = 1  # a=0, l=0\n        prev01 = 0  # a=0, l=1\n        prev02 = 0  # a=0, l=2\n        \n        # States for a=1 (1 absence)\n        prev10 = 0  # a=1, l=0\n        prev11 = 0  # a=1, l=1\n        prev12 = 0  # a=1, l=2\n        \n        for _ in range(n):\n            # Compute new states for a=0\n            new00 = (prev00 + prev01 + prev02) % MOD\n            new01 = prev00 % MOD\n            new02 = prev01 % MOD\n            \n            # Compute new states for a=1\n            sumA = (prev00 + prev01 + prev02) % MOD\n            sumP = (prev10 + prev11 + prev12) % MOD\n            new10 = (sumA + sumP) % MOD\n            new11 = prev10 % MOD\n            new12 = prev11 % MOD\n            \n            # Update previous states for next iteration\n            prev00, prev01, prev02 = new00, new01, new02\n            prev10, prev11, prev12 = new10, new11, new12\n        \n        # Sum all valid states for the final result\n        total = (prev00 + prev01 + prev02 + prev10 + prev11 + prev12) % MOD\n        return total\n", "happy-number": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        seen = set()\n        current = n\n        while True:\n            if current == 1:\n                return True\n            if current in seen:\n                return False\n            seen.add(current)\n            sum_sq = 0\n            num = current\n            while num > 0:\n                digit = num % 10\n                sum_sq += digit ** 2\n                num = num // 10\n            current = sum_sq\n", "search-insert-position": "from typing import List\n\nclass Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n", "jump-game": "from typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        max_reach = 0\n        last_index = len(nums) - 1\n        \n        for i in range(len(nums)):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + nums[i])\n            if max_reach >= last_index:\n                return True\n        \n        return max_reach >= last_index\n", "minimum-path-sum": "from typing import List\n\nclass Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue  # Starting point, no need to update\n                elif i == 0:\n                    # Only possible from the left\n                    grid[i][j] += grid[i][j-1]\n                elif j == 0:\n                    # Only possible from the top\n                    grid[i][j] += grid[i-1][j]\n                else:\n                    # Choose the minimum of the path from top or left\n                    grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]\n", "count-and-say": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        if n == 1:\n            return \"1\"\n        current = \"1\"\n        for _ in range(2, n + 1):\n            next_term = []\n            prev_char = current[0]\n            count = 1\n            for i in range(1, len(current)):\n                if current[i] == prev_char:\n                    count += 1\n                else:\n                    next_term.append(str(count) + prev_char)\n                    prev_char = current[i]\n                    count = 1\n            # Append the last processed group\n            next_term.append(str(count) + prev_char)\n            current = ''.join(next_term)\n        return current\n", "split-array-largest-sum": "from typing import List\n\nclass Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        left = max(nums)\n        right = sum(nums)\n        \n        while left < right:\n            mid = (left + right) // 2\n            current_sum = 0\n            count = 1  # At least one subarray\n            \n            for num in nums:\n                if current_sum + num > mid:\n                    count += 1\n                    current_sum = num\n                else:\n                    current_sum += num\n            \n            if count <= k:\n                # It's possible to split into k or fewer subarrays\n                right = mid\n            else:\n                # Need to increase the allowed maximum sum\n                left = mid + 1\n        \n        return left\n", "search-in-rotated-sorted-array": "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            # Check if the left half is sorted\n            if nums[left] <= nums[mid]:\n                # Target in left half\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                # Right half is sorted\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n", "letter-combinations-of-a-phone-number": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        \n        # Mapping of digits to corresponding letters\n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        # Initialize result with an empty string to start combinations\n        result = ['']\n        \n        # Iterate through each digit in the input string\n        for digit in digits:\n            letters = mapping[digit]\n            # Temporary list to store new combinations\n            temp = []\n            # Generate new combinations by appending each letter to existing combinations\n            for combo in result:\n                for letter in letters:\n                    temp.append(combo + letter)\n            # Update result to be the new list of combinations\n            result = temp\n        \n        return result\n", "combination-sum": "from typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        res = []\n        candidates.sort()\n        \n        def backtrack(start, path, remaining):\n            if remaining == 0:\n                res.append(path[:])\n                return\n            for i in range(start, len(candidates)):\n                c = candidates[i]\n                if c > remaining:\n                    break\n                path.append(c)\n                backtrack(i, path, remaining - c)\n                path.pop()\n        \n        backtrack(0, [], target)\n        return res\n", "find-the-closest-palindrome": "class Solution:\n    def nearestPalindromic(self, n: str) -> str:\n        orig_int = int(n)\n        orig_length = len(n)\n        l = orig_length\n        candidates = set()\n        k = (l + 1) // 2\n        prefix = n[:k]\n        \n        # Generate prefix-based candidates\n        for delta in (-1, 0, 1):\n            new_prefix_num = int(prefix) + delta\n            new_prefix_str = str(new_prefix_num).zfill(k)\n            if l % 2 == 0:\n                candidate = new_prefix_str + new_prefix_str[::-1]\n            else:\n                candidate = new_prefix_str + new_prefix_str[:-1][::-1]\n            candidates.add(candidate)\n        \n        # Add edge cases\n        # Edge 1: 10^(l-1) - 1\n        if l == 1:\n            edge_candidate1 = '0'\n        else:\n            edge_candidate1 = str(10 ** (l - 1) - 1)\n        candidates.add(edge_candidate1)\n        \n        # Edge 2: 10^l - 1\n        edge_candidate2 = str(10 ** l - 1)\n        candidates.add(edge_candidate2)\n        \n        # Edge 3: 10^(l-1) + 1\n        edge_candidate3 = str(10 ** (l - 1) + 1)\n        candidates.add(edge_candidate3)\n        \n        # Remove original number from candidates\n        if n in candidates:\n            candidates.remove(n)\n        \n        # Find the nearest palindromic number\n        min_diff = float('inf')\n        result = None\n        for candidate in candidates:\n            candidate_int = int(candidate)\n            diff = abs(candidate_int - orig_int)\n            if diff == 0:\n                continue  # Already removed\n            if diff < min_diff:\n                min_diff = diff\n                result = candidate_int\n            elif diff == min_diff:\n                if candidate_int < result:\n                    result = candidate_int\n        \n        return str(result)\n", "spiral-matrix-ii": "from typing import List\n\nclass Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        matrix = [[0] * n for _ in range(n)]\n        top = 0\n        bottom = n - 1\n        left = 0\n        right = n - 1\n        current = 1\n        \n        while top <= bottom and left <= right:\n            # Fill top row from left to right\n            for i in range(left, right + 1):\n                matrix[top][i] = current\n                current += 1\n            top += 1\n            \n            if top > bottom:\n                break\n            \n            # Fill right column from top to bottom\n            for i in range(top, bottom + 1):\n                matrix[i][right] = current\n                current += 1\n            right -= 1\n            \n            if left > right:\n                break\n            \n            # Fill bottom row from right to left\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = current\n                current += 1\n            bottom -= 1\n            \n            if top > bottom:\n                break\n            \n            # Fill left column from bottom to top\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = current\n                current += 1\n            left += 1\n        \n        return matrix\n", "reverse-integer": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        \n        sign = -1 if x < 0 else 1\n        x_abs = abs(x)\n        reversed_num = 0\n        \n        max_int = (1 << 31) - 1 if sign == 1 else (1 << 31)\n        \n        while x_abs != 0:\n            digit = x_abs % 10\n            x_abs = x_abs // 10\n            \n            # Check for overflow\n            if reversed_num > max_int // 10:\n                return 0\n            if reversed_num == max_int // 10 and digit > max_int % 10:\n                return 0\n            \n            reversed_num = reversed_num * 10 + digit\n        \n        return reversed_num * sign\n", "rotate-image": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        # Transpose the matrix\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        # Reverse each row to complete the rotation\n        for row in matrix:\n            row.reverse()\n", "maximum-product-subarray": "from typing import List\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        max_prod = current_max = current_min = nums[0]\n        \n        for i in range(1, len(nums)):\n            num = nums[i]\n            prev_max = current_max * num\n            prev_min = current_min * num\n            \n            current_max = max(num, prev_max, prev_min)\n            current_min = min(num, prev_max, prev_min)\n            \n            max_prod = max(max_prod, current_max)\n        \n        return max_prod\n", "frog-jump": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        stone_to_jumps = defaultdict(set)\n        stone_to_jumps[0].add(0)\n        \n        for s in stones:\n            jumps = stone_to_jumps[s]\n            for k in jumps:\n                for step in (k - 1, k, k + 1):\n                    next_pos = s + step\n                    if next_pos > s and next_pos in stone_set:\n                        stone_to_jumps[next_pos].add(step)\n        \n        return len(stone_to_jumps[stones[-1]]) > 0\n", "relative-ranks": "class Solution(object):\n    def findRelativeRanks(self, score):\n        sorted_scores = sorted(score, reverse=True)\n        rank_dict = {}\n        for i, s in enumerate(sorted_scores):\n            rank_dict[s] = i + 1\n        \n        result = []\n        for s in score:\n            rank = rank_dict[s]\n            if rank == 1:\n                result.append(\"Gold Medal\")\n            elif rank == 2:\n                result.append(\"Silver Medal\")\n            elif rank == 3:\n                result.append(\"Bronze Medal\")\n            else:\n                result.append(str(rank))\n        \n        return result\n", "longest-substring-without-repeating-characters": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_map = {}\n        max_len = 0\n        left = 0\n        for right in range(len(s)):\n            char = s[right]\n            if char in char_map and char_map[char] >= left:\n                left = char_map[char] + 1\n            char_map[char] = right\n            current_len = right - left + 1\n            if current_len > max_len:\n                max_len = current_len\n        return max_len\n", "substring-with-concatenation-of-all-words": "from collections import Counter\nfrom typing import List\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        num_words = len(words)\n        total_len = word_len * num_words\n        n = len(s)\n        \n        if total_len > n:\n            return []\n        \n        required = Counter(words)\n        result = []\n        \n        for offset in range(word_len):\n            words_in_offset = []\n            current_pos = offset\n            \n            # Collect all valid words in the current offset\n            while current_pos + word_len <= n:\n                word = s[current_pos:current_pos + word_len]\n                if word in required:\n                    words_in_offset.append(word)\n                else:\n                    words_in_offset.append(None)\n                current_pos += word_len\n            \n            # Skip if not enough words for a valid window\n            if len(words_in_offset) < num_words:\n                continue\n            \n            left = 0\n            current_count = Counter()\n            \n            # Sliding window approach\n            for right in range(len(words_in_offset)):\n                current_word = words_in_offset[right]\n                \n                # Reset window if invalid word encountered\n                if current_word is None:\n                    current_count.clear()\n                    left = right + 1\n                    continue\n                \n                current_count[current_word] += 1\n                \n                # Shrink the window if it exceeds the required number of words\n                while right - left + 1 > num_words:\n                    left_word = words_in_offset[left]\n                    current_count[left_word] -= 1\n                    if current_count[left_word] == 0:\n                        del current_count[left_word]\n                    left += 1\n                \n                # Check if current window has the correct size\n                if right - left + 1 == num_words:\n                    valid = True\n                    for key in required:\n                        if current_count.get(key, 0) != required[key]:\n                            valid = False\n                            break\n                    if valid:\n                        result.append(offset + left * word_len)\n        \n        return result\n", "max-chunks-to-make-sorted-ii": "from typing import List\n\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        n = len(arr)\n        if n == 0:\n            return 0\n        \n        # Precompute prefix_max array\n        prefix_max = [0] * n\n        prefix_max[0] = arr[0]\n        for i in range(1, n):\n            prefix_max[i] = max(prefix_max[i-1], arr[i])\n        \n        # Precompute suffix_min array\n        suffix_min = [0] * n\n        suffix_min[-1] = arr[-1]\n        for i in range(n-2, -1, -1):\n            suffix_min[i] = min(suffix_min[i+1], arr[i])\n        \n        # Count valid split points\n        count = 0\n        for i in range(n-1):\n            if prefix_max[i] <= suffix_min[i+1]:\n                count += 1\n        \n        return count + 1\n", "insertion-sort-list": "class Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        dummy = ListNode(0)\n        while head:\n            next_node = head.next\n            prev = dummy\n            # Find the insertion point in the dummy list\n            while prev.next and prev.next.val < head.val:\n                prev = prev.next\n            # Insert the current head node into the dummy list\n            head.next = prev.next\n            prev.next = head\n            # Move to the next node in the original list\n            head = next_node\n        return dummy.next\n", "remove-duplicates-from-sorted-list-ii": "class Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = prev.next\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                # Find the end of the duplicate group\n                duplicate_val = cur.val\n                while cur and cur.val == duplicate_val:\n                    cur = cur.next\n                # Link prev to the node after the duplicates\n                prev.next = cur\n            else:\n                # Move prev and cur to next nodes\n                prev = prev.next\n                cur = prev.next\n        \n        return dummy.next\n", "3sum": "class Solution:\n    def threeSum(self, nums):\n        nums.sort()\n        res = []\n        n = len(nums)\n        \n        for i in range(n):\n            # Skip duplicate elements for i\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            # Early termination if nums[i] > 0\n            if nums[i] > 0:\n                break\n            \n            left = i + 1\n            right = n - 1\n            \n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                \n                if current_sum == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    \n                    # Skip duplicates for left\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    \n                    # Skip duplicates for right\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                \n                elif current_sum < 0:\n                    left += 1\n                else:\n                    right -= 1\n        \n        return res\n", "edit-distance": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Initialize the first column (deleting all characters from word1)\n        for i in range(m + 1):\n            dp[i][0] = i\n        \n        # Initialize the first row (inserting all characters into word1)\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    insert = dp[i][j-1] + 1\n                    delete = dp[i-1][j] + 1\n                    replace = dp[i-1][j-1] + 1\n                    dp[i][j] = min(insert, delete, replace)\n        \n        return dp[m][n]\n", "hamming-distance": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        return bin(x ^ y).count('1')\n", "binary-tree-paths": "class Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n        \n        def helper(node, path):\n            if not node.left and not node.right:\n                result.append(path)\n            else:\n                if node.left:\n                    helper(node.left, path + \"->\" + str(node.left.val))\n                if node.right:\n                    helper(node.right, path + \"->\" + str(node.right.val))\n        \n        helper(root, str(root.val))\n        return result\n", "reverse-pairs": "from typing import List\n\nclass Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        def merge_sort_count(arr):\n            if len(arr) <= 1:\n                return 0, arr\n            \n            mid = len(arr) // 2\n            left_count, left = merge_sort_count(arr[:mid])\n            right_count, right = merge_sort_count(arr[mid:])\n            \n            cross_count = 0\n            j = 0\n            for num in left:\n                while j < len(right) and num > 2 * right[j]:\n                    j += 1\n                cross_count += j\n            \n            # Merge the two sorted halves\n            merged = []\n            i = k = 0\n            while i < len(left) and k < len(right):\n                if left[i] <= right[k]:\n                    merged.append(left[i])\n                    i += 1\n                else:\n                    merged.append(right[k])\n                    k += 1\n            merged.extend(left[i:])\n            merged.extend(right[k:])\n            \n            total_count = left_count + right_count + cross_count\n            return total_count, merged\n        \n        count, _ = merge_sort_count(nums)\n        return count\n", "reaching-points": "class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        if tx == sx and ty == sy:\n            return True\n        elif tx == sx:\n            return ty >= sy and (ty - sy) % tx == 0\n        elif ty == sy:\n            return tx >= sx and (tx - sx) % ty == 0\n        else:\n            return False\n", "compare-version-numbers": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        # Split both version strings into lists of integers\n        v1 = [int(part) for part in version1.split('.')]\n        v2 = [int(part) for part in version2.split('.')]\n        \n        # Determine the maximum length to pad the lists\n        max_len = max(len(v1), len(v2))\n        \n        # Pad the shorter list with zeros\n        v1 += [0] * (max_len - len(v1))\n        v2 += [0] * (max_len - len(v2))\n        \n        # Compare each corresponding revision\n        for i in range(max_len):\n            if v1[i] < v2[i]:\n                return -1\n            elif v1[i] > v2[i]:\n                return 1\n        return 0\n", "best-time-to-buy-and-sell-stock-ii": "from typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i - 1]:\n                profit += prices[i] - prices[i - 1]\n        return profit\n", "course-schedule-iii": "import heapq\nfrom typing import List\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        # Sort courses by their deadlines in ascending order\n        courses.sort(key=lambda x: x[1])\n        max_heap = []\n        total_time = 0\n        \n        for duration, last_day in courses:\n            if total_time + duration <= last_day:\n                # Take this course, as it fits within the deadline\n                heapq.heappush(max_heap, -duration)\n                total_time += duration\n            else:\n                # Check if replacing the longest course in heap with current course can help\n                if max_heap and -max_heap[0] > duration:\n                    # Remove the longest duration course\n                    removed = -heapq.heappop(max_heap)\n                    total_time -= removed\n                    # Add the current course duration\n                    total_time += duration\n                    heapq.heappush(max_heap, -duration)\n        # The number of courses is the size of the heap\n        return len(max_heap)\n", "reverse-nodes-in-k-group": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        current = head\n        \n        while current:\n            count = 0\n            temp = current\n            while temp and count < k:\n                temp = temp.next\n                count += 1\n            if count < k:\n                prev.next = current\n                break\n            # Reverse k nodes\n            prev_node = None\n            start = current\n            count_rev = 0\n            while count_rev < k:\n                next_node = current.next\n                current.next = prev_node\n                prev_node = current\n                current = next_node\n                count_rev += 1\n            # Connect reversed group with previous part\n            prev.next = prev_node\n            # Update prev to the end of reversed group (start)\n            start.next = current\n            prev = start\n        \n        return dummy.next\n", "repeated-substring-pattern": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        n = len(s)\n        for k in range(1, n // 2 + 1):\n            if n % k == 0:\n                substr = s[:k]\n                if substr * (n // k) == s:\n                    return True\n        return False\n", "unique-binary-search-trees": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dp = [0] * (n + 1)\n        dp[0] = 1  # Base case: empty tree\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - 1 - j]\n        \n        return dp[n]\n", "single-number-ii": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n", "stickers-to-spell-word": "from collections import deque, Counter\n\nclass Solution(object):\n    def minStickers(self, stickers, target):\n        # Preprocess the target to get character counts and sorted characters\n        count_target = Counter(target)\n        sorted_chars = sorted(count_target.keys())\n        n_chars = len(sorted_chars)\n        if n_chars == 0:\n            return 0  # As per constraints, target length >= 1\n        \n        # Generate target vector and zero vector\n        target_vector = tuple(count_target[c] for c in sorted_chars)\n        zero_vector = tuple(0 for _ in range(n_chars))\n        \n        # Preprocess each sticker into its vector representation and filter useful stickers\n        sticker_vectors = []\n        for sticker in stickers:\n            cnt = Counter(sticker)\n            vec = tuple(cnt.get(c, 0) for c in sorted_chars)\n            # Only include stickers that contribute at least one character\n            if any(vec):\n                sticker_vectors.append(vec)\n        \n        # Check if after filtering, no stickers remain but target is non-empty\n        if not sticker_vectors:\n            return -1\n        \n        # Check if all characters in the target are covered by the stickers\n        can_cover = [False] * n_chars\n        for i in range(n_chars):\n            for vec in sticker_vectors:\n                if vec[i] > 0:\n                    can_cover[i] = True\n                    break\n        if not all(can_cover):\n            return -1\n        \n        # BFS initialization\n        visited = set()\n        queue = deque()\n        queue.append((target_vector, 0))\n        visited.add(target_vector)\n        \n        while queue:\n            curr_vec, steps = queue.popleft()\n            \n            for sticker in sticker_vectors:\n                # Calculate new_vec after applying the sticker\n                new_vec = list(curr_vec)\n                for i in range(n_chars):\n                    new_vec[i] = max(new_vec[i] - sticker[i], 0)\n                new_vec_tuple = tuple(new_vec)\n                \n                # Check if target is achieved\n                if new_vec_tuple == zero_vector:\n                    return steps + 1\n                \n                # Skip if this sticker does not change the state\n                if new_vec_tuple == curr_vec:\n                    continue\n                \n                # Enqueue new state if not visited\n                if new_vec_tuple not in visited:\n                    visited.add(new_vec_tuple)\n                    queue.append((new_vec_tuple, steps + 1))\n        \n        # No solution found (though with coverage check, this should not happen)\n        return -1\n", "strange-printer": "class Solution:\n    def strangePrinter(self, s: str) -> int:\n        n = len(s)\n        if n == 0:\n            return 0\n        \n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = 1  # Base case\n        \n        for l in range(2, n + 1):  # l is the length of the substring\n            for i in range(n - l + 1):\n                j = i + l - 1\n                dp[i][j] = dp[i][j-1] + 1  # Initial value\n                \n                for k in range(i, j):\n                    if s[j] == s[k]:\n                        # Calculate the candidate value\n                        if k + 1 <= j - 1:\n                            current = dp[i][k] + dp[k+1][j-1]\n                        else:\n                            current = dp[i][k]\n                        dp[i][j] = min(dp[i][j], current)\n        \n        return dp[0][n-1]\n", "sqrtx": "class Solution(object):\n    def mySqrt(self, x):\n        low = 0\n        high = x\n        while low <= high:\n            mid = (low + high) // 2\n            mid_sq = mid * mid\n            if mid_sq < x:\n                low = mid + 1\n            elif mid_sq > x:\n                high = mid - 1\n            else:\n                return mid\n        return high\n", "roman-to-integer": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        total = 0\n        for i in range(len(s)):\n            current_value = roman_map[s[i]]\n            if i < len(s) - 1 and current_value < roman_map[s[i + 1]]:\n                total -= current_value\n            else:\n                total += current_value\n        return total\n", "contains-duplicate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return True\n            seen.add(num)\n        return False\n", "sliding-window-maximum": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        dq = deque()\n        result = []\n        \n        for i in range(len(nums)):\n            # Remove elements outside the current window from the front\n            while dq and dq[0] <= i - k:\n                dq.popleft()\n            \n            # Remove elements smaller than the current element from the back\n            while dq and nums[i] >= nums[dq[-1]]:\n                dq.pop()\n            \n            # Add current element's index to the deque\n            dq.append(i)\n            \n            # Add the maximum for the current window to the result\n            if i >= k - 1:\n                result.append(nums[dq[0]])\n        \n        return result\n", "median-of-two-sorted-arrays": "from typing import List\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # Ensure nums1 is the shorter array to optimize binary search\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        low, high = 0, m\n        total_left = (m + n + 1) // 2  # Total elements in left partition\n        \n        while low <= high:\n            i = (low + high) // 2\n            j = total_left - i\n            \n            # Handle edge cases where partitions are at the ends\n            max_left_1 = float('-inf') if i == 0 else nums1[i - 1]\n            max_left_2 = float('-inf') if j == 0 else nums2[j - 1]\n            min_right_1 = float('inf') if i == m else nums1[i]\n            min_right_2 = float('inf') if j == n else nums2[j]\n            \n            # Check if the current partition is valid\n            if max_left_1 <= min_right_2 and max_left_2 <= min_right_1:\n                # Partition is valid, calculate median\n                if (m + n) % 2 == 0:\n                    max_left = max(max_left_1, max_left_2)\n                    min_right = min(min_right_1, min_right_2)\n                    return (max_left + min_right) / 2.0\n                else:\n                    return max(max_left_1, max_left_2)\n            elif max_left_1 > min_right_2:\n                # Move partition i to the left\n                high = i - 1\n            else:\n                # Move partition i to the right\n                low = i + 1\n", "find-minimum-in-rotated-sorted-array": "from typing import List\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return nums[left]\n", "pascals-triangle-ii": "from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        row = [1]\n        for i in range(1, rowIndex + 1):\n            val = row[i - 1] * (rowIndex - i + 1) // i\n            row.append(val)\n        return row\n", "path-sum-ii": "from typing import Optional, List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        result = []\n        \n        def backtrack(node, path, current_sum):\n            current_sum += node.val\n            path.append(node.val)\n            \n            if not node.left and not node.right and current_sum == targetSum:\n                result.append(path[:])\n            else:\n                if node.left:\n                    backtrack(node.left, path, current_sum)\n                if node.right:\n                    backtrack(node.right, path, current_sum)\n            \n            path.pop()\n        \n        if not root:\n            return []\n        backtrack(root, [], 0)\n        return result\n", "construct-the-rectangle": "import math\nfrom typing import List\n\nclass Solution:\n    def constructRectangle(self, area: int) -> List[int]:\n        w = math.isqrt(area)\n        while w > 0:\n            if area % w == 0:\n                return [area // w, w]\n            w -= 1\n        return [area, 1]\n", "word-ladder-ii": "from collections import deque, defaultdict\nfrom typing import List\n\nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        if endWord not in wordList:\n            return []\n        \n        wordSet = set(wordList)\n        parent = defaultdict(list)\n        distance = {beginWord: 0}\n        \n        queue = deque([beginWord])\n        found = False\n        \n        while queue and not found:\n            level_size = len(queue)\n            for _ in range(level_size):\n                current = queue.popleft()\n                for i in range(len(current)):\n                    for c in 'abcdefghijklmnopqrstuvwxyz':\n                        if c == current[i]:\n                            continue\n                        neighbor = current[:i] + c + current[i+1:]\n                        if neighbor in wordSet:\n                            if neighbor not in distance:\n                                distance[neighbor] = distance[current] + 1\n                                parent[neighbor].append(current)\n                                queue.append(neighbor)\n                            else:\n                                if distance[neighbor] == distance[current] + 1:\n                                    parent[neighbor].append(current)\n                            if neighbor == endWord:\n                                found = True\n            if found:\n                break\n        \n        if endWord not in distance:\n            return []\n        \n        res = []\n        path = []\n        \n        def dfs(node):\n            if node == beginWord:\n                path.append(node)\n                res.append(path[::-1])\n                path.pop()\n                return\n            path.append(node)\n            for p in parent[node]:\n                dfs(p)\n            path.pop()\n        \n        dfs(endWord)\n        return res\n", "balanced-binary-tree": "class Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        def check(node):\n            if not node:\n                return 0\n            left = check(node.left)\n            if left == -1:\n                return -1\n            right = check(node.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n        \n        return check(root) != -1\n", "power-of-two": "class Solution:\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n > 0 and (n & (n - 1)) == 0\n", "subsets-ii": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        result = []\n        \n        def backtrack(start, path):\n            result.append(list(path))\n            \n            for i in range(start, len(nums)):\n                if i > start and nums[i] == nums[i - 1]:\n                    continue\n                path.append(nums[i])\n                backtrack(i + 1, path)\n                path.pop()\n        \n        backtrack(0, [])\n        return result\n", "largest-rectangle-in-histogram": "from typing import List\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        heights.append(0)  # Append a zero to handle remaining elements in the stack\n        stack = [-1]  # Initialize stack with a sentinel\n        max_area = 0\n        \n        for i in range(len(heights)):\n            # Pop elements from the stack when a smaller height is found\n            while stack[-1] != -1 and heights[i] < heights[stack[-1]]:\n                current_h = heights[stack.pop()]\n                width = i - stack[-1] - 1\n                max_area = max(max_area, current_h * width)\n            stack.append(i)\n        \n        heights.pop()  # Restore the original list (optional)\n        return max_area\n", "evaluate-reverse-polish-notation": "from typing import List\n\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for token in tokens:\n            if token in {'+', '-', '*', '/'}:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':\n                    stack.append(int(a / b))  # Truncate towards zero\n            else:\n                stack.append(int(token))\n        return stack.pop()\n", "perfect-rectangle": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        if not rectangles:\n            return False\n        \n        corners = set()\n        sum_area = 0\n        \n        min_x = min_y = float('inf')\n        max_a = max_b = -float('inf')\n        \n        for rect in rectangles:\n            x, y, a, b = rect\n            # Update the boundaries of the large rectangle\n            if x < min_x:\n                min_x = x\n            if y < min_y:\n                min_y = y\n            if a > max_a:\n                max_a = a\n            if b > max_b:\n                max_b = b\n            \n            # Calculate the area of the current rectangle\n            area = (a - x) * (b - y)\n            sum_area += area\n            \n            # Process each corner of the current rectangle\n            for point in [(x, y), (x, b), (a, y), (a, b)]:\n                if point in corners:\n                    corners.remove(point)\n                else:\n                    corners.add(point)\n        \n        # Calculate the expected area of the large rectangle\n        expected_area = (max_a - min_x) * (max_b - min_y)\n        if sum_area != expected_area:\n            return False\n        \n        # Check if there are exactly four corners left, which must be the four corners of the large rectangle\n        if len(corners) != 4:\n            return False\n        \n        ideal_corners = {(min_x, min_y), (min_x, max_b), (max_a, min_y), (max_a, max_b)}\n        return corners == ideal_corners\n", "excel-sheet-column-title": "class Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        result = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            remainder = columnNumber % 26\n            char = chr(remainder + ord('A'))\n            result = char + result\n            columnNumber = columnNumber // 26\n        return result\n", "maximum-subarray": "from typing import List\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        current_max = max_sum = nums[0]\n        for num in nums[1:]:\n            current_max = max(num, current_max + num)\n            max_sum = max(max_sum, current_max)\n        return max_sum\n", "sliding-puzzle": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def slidingPuzzle(self, board: List[List[int]]) -> int:\n        # Adjacency list for each position in the 2x3 grid (flattened)\n        adjacent = [\n            [1, 3],          # Neighbors for position 0\n            [0, 2, 4],       # Neighbors for position 1\n            [1, 5],          # Neighbors for position 2\n            [0, 4],          # Neighbors for position 3\n            [3, 1, 5],       # Neighbors for position 4\n            [2, 4]           # Neighbors for position 5\n        ]\n        \n        # Convert the initial board to a string\n        initial = ''.join(str(cell) for row in board for cell in row)\n        target = '123450'\n        \n        if initial == target:\n            return 0\n        \n        # Initialize BFS\n        queue = deque()\n        queue.append((initial, 0))\n        visited = set()\n        visited.add(initial)\n        \n        while queue:\n            current_state, steps = queue.popleft()\n            \n            # Find the position of '0' in the current state\n            zero_index = current_state.index('0')\n            \n            # Generate all possible next states by swapping '0' with its neighbors\n            for neighbor in adjacent[zero_index]:\n                new_state = list(current_state)\n                # Swap the '0' with the neighbor\n                new_state[zero_index], new_state[neighbor] = new_state[neighbor], new_state[zero_index]\n                new_state_str = ''.join(new_state)\n                \n                if new_state_str not in visited:\n                    visited.add(new_state_str)\n                    queue.append((new_state_str, steps + 1))\n        \n        # If target is unreachable\n        return -1\n", "isomorphic-strings": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        s_to_t = {}\n        t_to_s = {}\n        \n        for sc, tc in zip(s, t):\n            # Check mapping from s to t\n            if sc in s_to_t:\n                if s_to_t[sc] != tc:\n                    return False\n            else:\n                # Check if current target character is already mapped to another source\n                if tc in t_to_s:\n                    return False\n                # Update both mappings\n                s_to_t[sc] = tc\n                t_to_s[tc] = sc\n        \n        return True\n", "search-in-rotated-sorted-array-ii": "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            \n            if nums[left] < nums[mid]:\n                # Left part is sorted\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            elif nums[left] > nums[mid]:\n                # Right part is sorted\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                # nums[left] == nums[mid], increment left to skip duplicates\n                left += 1\n        \n        return False\n", "unique-paths-ii": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        # Check if the starting cell or ending cell is blocked\n        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:\n            return 0\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        # Initialize DP table\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = 1\n        \n        # Fill first row\n        for j in range(1, n):\n            if obstacleGrid[0][j] == 0:\n                dp[0][j] = dp[0][j-1]\n            else:\n                dp[0][j] = 0  # Explicitly set to 0 for clarity\n        \n        # Fill first column\n        for i in range(1, m):\n            if obstacleGrid[i][0] == 0:\n                dp[i][0] = dp[i-1][0]\n            else:\n                dp[i][0] = 0\n        \n        # Fill the rest of the DP table\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                else:\n                    dp[i][j] = 0\n        \n        return dp[m-1][n-1]\n", "decode-ways-ii": "import math\n\nclass Solution(object):\n    def numDecodings(self, s):\n        MOD = 10**9 + 7\n        n = len(s)\n        if n == 0:\n            return 0\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1  # Empty string has one way to decode\n        \n        # Initialize dp[1] for the first character\n        if n >= 1:\n            first_char = s[0]\n            if first_char == '0':\n                dp[1] = 0\n            elif first_char == '*':\n                dp[1] = 9\n            else:\n                dp[1] = 1\n        \n        # Fill the dp array from i=2 to n\n        for i in range(2, n + 1):\n            curr_char = s[i-1]\n            \n            # Compute f1 (single current character contribution)\n            if curr_char == '*':\n                f1 = 9\n            elif curr_char == '0':\n                f1 = 0\n            else:\n                f1 = 1\n            \n            # Compute f2 (two characters contribution)\n            prev_char = s[i-2]\n            if prev_char == '0':\n                f2 = 0\n            else:\n                if prev_char == '*' and curr_char == '*':\n                    # Both are stars\n                    f2 = 15\n                elif prev_char == '*':\n                    # Previous is '*', current is a digit\n                    d2 = int(curr_char)\n                    # Calculate min_d1 and max_d1\n                    lower = math.ceil((10 - d2) / 10)\n                    min_d1 = max(1, lower)\n                    upper = math.floor((26 - d2) / 10)\n                    max_d1 = min(9, upper)\n                    if max_d1 < min_d1:\n                        f2 = 0\n                    else:\n                        f2 = max_d1 - min_d1 + 1\n                elif curr_char == '*':\n                    # Current is '*', previous is a digit\n                    if prev_char == '1':\n                        f2 = 9\n                    elif prev_char == '2':\n                        f2 = 6\n                    else:\n                        f2 = 0\n                else:\n                    # Both are digits\n                    combined = int(prev_char + curr_char)\n                    if 10 <= combined <= 26:\n                        f2 = 1\n                    else:\n                        f2 = 0\n            \n            # Update dp[i]\n            res = (f1 * dp[i-1]) % MOD\n            res = (res + (f2 * dp[i-2]) % MOD) % MOD\n            dp[i] = res\n        \n        return dp[n] % MOD\n", "3sum-closest": "from typing import List\n\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        closest_sum = None\n        min_diff = float('inf')\n        n = len(nums)\n        \n        for i in range(n - 2):\n            left = i + 1\n            right = n - 1\n            \n            while left < right:\n                sum3 = nums[i] + nums[left] + nums[right]\n                current_diff = abs(sum3 - target)\n                \n                if current_diff < min_diff:\n                    min_diff = current_diff\n                    closest_sum = sum3\n                    if min_diff == 0:\n                        return closest_sum  # Early exit if exact match found\n                \n                if sum3 < target:\n                    left += 1\n                else:\n                    right -= 1\n        \n        return closest_sum\n", "maximum-depth-of-binary-tree": "class Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n", "intersection-of-two-arrays-ii": "from collections import Counter\nfrom typing import List\n\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Count the occurrences of each number in nums1\n        counts = Counter(nums1)\n        # Result list to store the intersection\n        result = []\n        # Iterate through each number in nums2\n        for num in nums2:\n            # If the number exists in counts with a positive count\n            if counts.get(num, 0) > 0:\n                # Add the number to the result\n                result.append(num)\n                # Decrement the count in counts\n                counts[num] -= 1\n        return result\n", "minimum-absolute-difference-in-bst": "class Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        prev = None\n        min_diff = float('inf')\n        stack = []\n        current = root\n        \n        while current or stack:\n            # Reach the leftmost node\n            while current:\n                stack.append(current)\n                current = current.left\n            \n            # Visit the node\n            current = stack.pop()\n            if prev is not None:\n                current_diff = current.val - prev\n                if current_diff < min_diff:\n                    min_diff = current_diff\n            \n            # Update previous to current node's value\n            prev = current.val\n            # Move to the right subtree\n            current = current.right\n        \n        return min_diff\n", "find-mode-in-binary-search-tree": "from typing import Optional, List\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        prev = None\n        current_count = 0\n        max_count = 0\n        modes = []\n\n        stack = []\n        current = root\n\n        while stack or current:\n            # Traverse to the leftmost node\n            while current:\n                stack.append(current)\n                current = current.left\n\n            current = stack.pop()\n\n            # Update current_count and prev\n            if prev is None or current.val != prev:\n                current_count = 1\n                prev = current.val\n            else:\n                current_count += 1\n\n            # Update modes and max_count\n            if current_count > max_count:\n                modes = [current.val]\n                max_count = current_count\n            elif current_count == max_count:\n                modes.append(current.val)\n\n            # Move to the right child\n            current = current.right\n\n        return modes\n", "find-the-index-of-the-first-occurrence-in-a-string": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        m = len(needle)\n        n = len(haystack)\n        if m > n:\n            return -1\n        for i in range(n - m + 1):\n            if haystack[i:i + m] == needle:\n                return i\n        return -1\n", "strong-password-checker": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        # Check for missing character types\n        missing_lower = 1\n        missing_upper = 1\n        missing_digit = 1\n        for c in password:\n            if c.islower():\n                missing_lower = 0\n            elif c.isupper():\n                missing_upper = 0\n            elif c.isdigit():\n                missing_digit = 0\n        missing = missing_lower + missing_upper + missing_digit\n        \n        # Process runs of the same character\n        runs = []\n        n = len(password)\n        if n == 0:\n            return max(6, missing)\n        \n        prev = password[0]\n        count = 1\n        for i in range(1, n):\n            if password[i] == prev:\n                count += 1\n            else:\n                if count >= 3:\n                    runs.append(count)\n                prev = password[i]\n                count = 1\n        if count >= 3:\n            runs.append(count)\n        \n        replace_missing = sum(run // 3 for run in runs)\n        \n        # Handle different cases based on password length\n        if n < 6:\n            return max(6 - n, missing, replace_missing)\n        elif n <= 20:\n            return max(missing, replace_missing)\n        else:\n            # Length > 20\n            k_initial = n - 20\n            \n            # Calculate mod_counts for runs\n            mod_counts = [0, 0, 0]  # mod0, mod1, mod2\n            for run in runs:\n                if run >= 3:\n                    mod = run % 3\n                    mod_counts[mod] += 1\n            \n            # Phase 1: Delete in mod0 runs\n            k = k_initial\n            replace_missing_val = replace_missing\n            phase0_d = min(k, mod_counts[0])\n            replace_missing_val -= phase0_d\n            k -= phase0_d\n            mod_counts[0] -= phase0_d\n            \n            # Phase 2: Delete in batches of 2 from mod1 runs\n            phase1_d = min(k // 2, mod_counts[1])\n            replace_missing_val -= phase1_d\n            k -= phase1_d * 2\n            mod_counts[1] -= phase1_d\n            \n            # Phase 3: Delete in batches of 3 from mod2 runs\n            phase2_d = min(k // 3, mod_counts[2])\n            replace_missing_val -= phase2_d\n            k -= phase2_d * 3\n            mod_counts[2] -= phase2_d\n            \n            # Phase 4: Remaining deletions\n            replace_missing_val -= (k // 3)\n            replace_missing_val = max(replace_missing_val, 0)\n            \n            return k_initial + max(missing, replace_missing_val)\n", "factorial-trailing-zeroes": "class Solution(object):\n    def trailingZeroes(self, n):\n        count = 0\n        divisor = 5\n        while divisor <= n:\n            count += n // divisor\n            divisor *= 5\n        return count\n", "zigzag-conversion": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        if numRows == 1:\n            return s\n        \n        cycle = 2 * (numRows - 1)\n        rows = [''] * numRows\n        \n        for i, char in enumerate(s):\n            mod = i % cycle\n            if mod < numRows:\n                rows[mod] += char\n            else:\n                # Calculate the correct row for the upward direction\n                row = cycle - mod\n                rows[row] += char\n        \n        return ''.join(rows)\n", "trapping-rain-water": "from typing import List\n\nclass Solution(object):\n    def trap(self, height: List[int]) -> int:\n        if not height:\n            return 0\n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        \n        left_max[0] = height[0]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        \n        right_max[-1] = height[-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        \n        res = 0\n        for i in range(n):\n            res += min(left_max[i], right_max[i]) - height[i]\n        \n        return res\n", "find-all-numbers-disappeared-in-an-array": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for num in nums:\n            x = abs(num)\n            idx = x - 1\n            if nums[idx] > 0:\n                nums[idx] = -nums[idx]\n        \n        res = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                res.append(i + 1)\n        \n        return res\n", "count-of-smaller-numbers-after-self": "import bisect\n\nclass FenwickTree:\n    def __init__(self, size):\n        self.n = size\n        self.tree = [0] * (self.n + 2)  # 1-based indexing, extra space for safety\n\n    def update(self, index, delta):\n        # Add delta to the specified index (1-based)\n        while index <= self.n:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index):\n        # Return the prefix sum from 1 to index (inclusive)\n        res = 0\n        while index > 0:\n            res += self.tree[index]\n            index -= index & -index\n        return res\n\nclass Solution:\n    def countSmaller(self, nums):\n        if not nums:\n            return []\n\n        n = len(nums)\n        sorted_nums = sorted(nums)\n        ft = FenwickTree(n)\n        result = []\n\n        for x in reversed(nums):\n            # Find the number of elements less than x using coordinate compression\n            rank = bisect.bisect_left(sorted_nums, x)\n            # Query the Fenwick Tree up to this rank\n            count = ft.query(rank)\n            result.append(count)\n            # Update the Fenwick Tree with the current element's rank + 1 (1-based)\n            ft.update(rank + 1, 1)\n\n        # Reverse the result to match the original order\n        return result[::-1]\n", "set-intersection-size-at-least-two": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        # Sort intervals by their end, then by descending start\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        a = b = -float('inf')\n        res = 0\n        \n        for s, e in intervals:\n            if b < s:\n                # Need to add two points\n                res += 2\n                a = e - 1\n                b = e\n            elif a < s:\n                # Need to add one point\n                res += 1\n                a = b\n                b = e\n        return res\n", "symmetric-tree": "# Recursive Approach\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def helper(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and helper(left.left, right.right) and helper(left.right, right.left)\n        return helper(root.left, root.right)\n\n# Iterative Approach\nfrom collections import deque\n\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return True\n        queue = deque([(root.left, root.right)])\n        while queue:\n            left, right = queue.popleft()\n            if not left and not right:\n                continue\n            if not left or not right:\n                return False\n            if left.val != right.val:\n                return False\n            queue.append((left.left, right.right))\n            queue.append((left.right, right.left))\n        return True\n", "number-of-atoms": "from collections import defaultdict\nclass Solution:\n    def countOfAtoms(self, formula: str) -> str:\n        stack = [defaultdict(int)]\n        i = 0\n        n = len(formula)\n        \n        while i < n:\n            if formula[i] == '(':\n                stack.append(defaultdict(int))\n                i += 1\n            elif formula[i] == ')':\n                i += 1\n                # Parse the number after the closing parenthesis\n                num = 0\n                start = i\n                while i < n and formula[i].isdigit():\n                    num = num * 10 + int(formula[i])\n                    i += 1\n                if i == start:\n                    num = 1  # No digits found, default to 1\n                # Pop the current scope and merge into the previous one\n                child = stack.pop()\n                parent = stack[-1]\n                for elem, count in child.items():\n                    parent[elem] += count * num\n            else:\n                # Parse element name\n                elem = formula[i]\n                i += 1\n                while i < n and formula[i].islower():\n                    elem += formula[i]\n                    i += 1\n                # Parse element count\n                num = 0\n                start = i\n                while i < n and formula[i].isdigit():\n                    num = num * 10 + int(formula[i])\n                    i += 1\n                if i == start:\n                    num = 1  # Default to 1 if no digits\n                # Add to current scope's counts\n                stack[-1][elem] += num\n        \n        # Collect the results in lexicographical order\n        total = stack[0]\n        sorted_elements = sorted(total.keys())\n        res = []\n        for elem in sorted_elements:\n            res.append(elem)\n            if total[elem] > 1:\n                res.append(str(total[elem]))\n        return ''.join(res)\n", "binary-tree-preorder-traversal": "from typing import List\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        result = []\n        if not root:\n            return result\n        \n        stack = [root]\n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return result\n", "power-of-four": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n > 0 and (n & (n - 1)) == 0 and n % 3 == 1\n", "invert-binary-tree": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        root.left = right\n        root.right = left\n        return root\n", "generate-parentheses": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        self.backtrack(result, \"\", 0, 0, n)\n        return result\n    \n    def backtrack(self, result, current_str, open_count, close_count, n):\n        if len(current_str) == 2 * n:\n            result.append(current_str)\n            return\n        if open_count < n:\n            self.backtrack(result, current_str + '(', open_count + 1, close_count, n)\n        if close_count < open_count:\n            self.backtrack(result, current_str + ')', open_count, close_count + 1, n)\n", "patching-array": "from typing import List\n\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        covered_sum = 0\n        patches = 0\n        index = 0\n        length = len(nums)\n        \n        while covered_sum < n:\n            if index < length and nums[index] <= covered_sum + 1:\n                covered_sum += nums[index]\n                index += 1\n            else:\n                add_num = covered_sum + 1\n                covered_sum += add_num\n                patches += 1\n        \n        return patches\n", "longest-valid-parentheses": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        stack = [-1]  # Initialize stack with -1 to handle edge cases\n        max_len = 0\n        for i, char in enumerate(s):\n            if char == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    current_len = i - stack[-1]\n                    if current_len > max_len:\n                        max_len = current_len\n        return max_len\n", "fraction-to-recurring-decimal": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        if denominator == 0:\n            return \"\"\n        \n        sign = '-' if (numerator < 0) ^ (denominator < 0) else ''\n        num = abs(numerator)\n        den = abs(denominator)\n        integer_part = num // den\n        remainder = num % den\n        \n        if remainder == 0:\n            return f\"{sign}{integer_part}\" if integer_part != 0 else \"0\"\n        \n        decimals = []\n        remainder_pos = {}\n        has_cycle = False\n        cycle_start = 0\n        \n        while remainder != 0:\n            if remainder in remainder_pos:\n                cycle_start = remainder_pos[remainder]\n                has_cycle = True\n                break\n            remainder_pos[remainder] = len(decimals)\n            remainder *= 10\n            digit = remainder // den\n            decimals.append(str(digit))\n            remainder = remainder % den\n        \n        if has_cycle:\n            non_cycle = ''.join(decimals[:cycle_start])\n            cycle_part = ''.join(decimals[cycle_start:])\n            decimal_str = f\"{non_cycle}({cycle_part})\"\n        else:\n            decimal_str = ''.join(decimals)\n        \n        integer_str = str(integer_part)\n        return f\"{sign}{integer_str}.{decimal_str}\"\n", "sort-list": "# Definition for singly-linked list.\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution(object):\n    def sortList(self, head):\n        # Handle the base case where the list is empty or has one element\n        if not head or not head.next:\n            return head\n        \n        # Helper function to split the list into two parts: returns the start of the next sublist\n        def split(start, size):\n            if not start:\n                return None\n            current = start\n            # Move (size-1) steps to find the end of the first sublist\n            for _ in range(1, size):\n                if current.next:\n                    current = current.next\n                else:\n                    break\n            next_sub = current.next\n            current.next = None  # Truncate the current sublist\n            return next_sub\n        \n        # Helper function to merge two sorted sublists\n        def merge(list1, list2):\n            dummy = ListNode(0)\n            tail = dummy\n            while list1 and list2:\n                if list1.val <= list2.val:\n                    tail.next = list1\n                    list1 = list1.next\n                else:\n                    tail.next = list2\n                    list2 = list2.next\n                tail = tail.next\n            tail.next = list1 if list1 else list2\n            return dummy.next\n        \n        # Calculate the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        size = 1\n        \n        while size < length:\n            prev = dummy\n            curr = dummy.next\n            while curr:\n                first = curr\n                second = split(first, size)\n                curr = split(second, size)\n                merged = merge(first, second)\n                # Attach the merged sublist to the previous part\n                prev.next = merged\n                # Move prev to the end of the merged sublist\n                while prev.next:\n                    prev = prev.next\n            size *= 2\n        \n        return dummy.next\n", "russian-doll-envelopes": "import bisect\n\nclass Solution(object):\n    def maxEnvelopes(self, envelopes):\n        # Sort envelopes by width ascending, then by height descending.\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # Extract the heights into a list.\n        heights = [h for w, h in envelopes]\n        \n        # Compute the Longest Increasing Subsequence (LIS) in the heights array.\n        tails = []\n        for h in heights:\n            # Use binary search to find the insertion point in tails.\n            idx = bisect.bisect_left(tails, h)\n            if idx == len(tails):\n                tails.append(h)\n            else:\n                tails[idx] = h\n        return len(tails)\n", "set-matrix-zeroes": "class Solution(object):\n    def setZeroes(self, matrix):\n        m = len(matrix)\n        if m == 0:\n            return\n        n = len(matrix[0])\n        \n        first_row_zero = False\n        first_col_zero = False\n        \n        # Check if first row has any zero\n        for j in range(n):\n            if matrix[0][j] == 0:\n                first_row_zero = True\n                break\n        \n        # Check if first column has any zero\n        for i in range(m):\n            if matrix[i][0] == 0:\n                first_col_zero = True\n                break\n        \n        # Use first row and column to mark zeros in the rest of the matrix\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        # Set elements to zero based on the markers\n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        # Handle first row\n        if first_row_zero:\n            for j in range(n):\n                matrix[0][j] = 0\n        \n        # Handle first column\n        if first_col_zero:\n            for i in range(m):\n                matrix[i][0] = 0\n", "remove-nth-node-from-end-of-list": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(0)\n        dummy.next = head\n        slow = dummy\n        fast = dummy\n        \n        # Move fast pointer n steps ahead\n        for _ in range(n):\n            fast = fast.next\n        \n        # Move both pointers until fast is at the last node\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # Remove the nth node from end\n        slow.next = slow.next.next\n        \n        return dummy.next\n", "intersection-of-two-arrays": "class Solution:\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # Convert both lists to sets and find their intersection\n        return list(set(nums1) & set(nums2))\n", "super-washing-machines": "from typing import List\n\nclass Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        total = sum(machines)\n        n = len(machines)\n        \n        if total % n != 0:\n            return -1\n        \n        average = total // n\n        max_surplus = 0\n        current_sum = 0\n        max_prefix = 0\n        \n        for num in machines:\n            diff = num - average\n            if diff > max_surplus:\n                max_surplus = diff\n            current_sum += diff\n            current_abs = abs(current_sum)\n            if current_abs > max_prefix:\n                max_prefix = current_abs\n        \n        return max(max_surplus, max_prefix)\n", "kth-smallest-number-in-multiplication-table": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        # Ensure m <= n for optimal performance\n        if m > n:\n            m, n = n, m\n        \n        low, high = 1, m * n\n        \n        while low <= high:\n            mid = (low + high) // 2\n            cnt = self.count(mid, m, n)\n            if cnt < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low\n    \n    def count(self, x, m, n):\n        total = 0\n        upper = min(m, x)\n        for i in range(1, upper + 1):\n            total += min(x // i, n)\n        return total\n", "convert-sorted-list-to-binary-search-tree": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        # Base cases\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        \n        # Find the middle node using slow and fast pointers\n        slow = head\n        fast = head\n        prev_slow = None\n        \n        while fast and fast.next:\n            prev_slow = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Create the root node with the middle value\n        root = TreeNode(slow.val)\n        \n        # Split the list into left and right parts\n        prev_slow.next = None  # Terminate the left part\n        \n        # Recursively build left and right subtrees\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root\n", "merge-two-sorted-lists": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        # Step 1: Initialize a dummy node and a current pointer\n        dummy = ListNode()\n        current = dummy\n\n        # Step 2: Merge both lists while both are non-empty\n        while list1 and list2:\n            if list1.val <= list2.val:\n                current.next = list1\n                list1 = list1.next\n            else:\n                current.next = list2\n                list2 = list2.next\n            current = current.next\n\n        # Step 3: Append the remaining nodes from list1 or list2\n        current.next = list1 or list2\n\n        # Step 4: Return the head of the merged list\n        return dummy.next\n", "maximal-rectangle": "from typing import List\n\nclass Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix:\n            return 0\n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        heights = [0] * cols\n\n        for row in matrix:\n            # Update the heights array for the current row\n            for col in range(cols):\n                if row[col] == '1':\n                    heights[col] += 1\n                else:\n                    heights[col] = 0\n            # Calculate the largest rectangle area in the current histogram\n            current_area = self.largestRectangleArea(heights)\n            if current_area > max_area:\n                max_area = current_area\n\n        return max_area\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        heights = heights.copy()\n        heights.append(0)  # Append a dummy zero to handle remaining bars in stack\n        stack = []\n        max_area = 0\n\n        for i in range(len(heights)):\n            while stack and heights[i] < heights[stack[-1]]:\n                top = stack.pop()\n                # Calculate the area with heights[top] as the smallest bar\n                if not stack:\n                    width = i\n                else:\n                    width = i - stack[-1] - 1\n                area = heights[top] * width\n                if area > max_area:\n                    max_area = area\n            stack.append(i)\n        return max_area\n", "subsets": "class Solution(object):\n    def subsets(self, nums):\n        subsets = [[]]\n        for num in nums:\n            n = len(subsets)\n            for i in range(n):\n                subsets.append(subsets[i] + [num])\n        return subsets\n", "find-minimum-in-rotated-sorted-array-ii": "class Solution(object):\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]\n", "valid-number": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        if 'e' in s or 'E' in s:\n            # Check for exactly one 'e' or 'E'\n            if s.lower().count('e') != 1:\n                return False\n            e_pos = s.lower().find('e')\n            if e_pos == 0 or e_pos == len(s) - 1:\n                return False\n            left = s[:e_pos]\n            right = s[e_pos+1:]\n            return (self.is_valid_decimal(left) or self.is_valid_integer(left)) and self.is_valid_integer(right)\n        else:\n            return self.is_valid_decimal(s) or self.is_valid_integer(s)\n    \n    def is_valid_decimal(self, s: str) -> bool:\n        if not s:\n            return False\n        # Check optional sign\n        if s[0] in '+-':\n            s = s[1:]\n        if not s:\n            return False\n        if s.count('.') != 1:\n            return False\n        parts = s.split('.')\n        left_part = parts[0]\n        right_part = parts[1]\n        # Check that left and/or right parts are digits or empty, but not both empty\n        if (left_part == '' or left_part.isdigit()) and (right_part == '' or right_part.isdigit()):\n            return left_part != '' or right_part != ''\n        return False\n    \n    def is_valid_integer(self, s: str) -> bool:\n        if not s:\n            return False\n        if s[0] in '+-':\n            s = s[1:]\n        return s.isdigit() and len(s) > 0\n", "integer-to-roman": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        roman_numerals = [\n            (1000, 'M'), (900, 'CM'),\n            (500, 'D'), (400, 'CD'),\n            (100, 'C'), (90, 'XC'),\n            (50, 'L'), (40, 'XL'),\n            (10, 'X'), (9, 'IX'),\n            (5, 'V'), (4, 'IV'), (1, 'I')\n        ]\n        res = []\n        for value, symbol in roman_numerals:\n            while num >= value:\n                res.append(symbol)\n                num -= value\n            if num == 0:\n                break\n        return ''.join(res)\n", "find-the-difference": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        sum_s = sum(ord(c) for c in s)\n        sum_t = sum(ord(c) for c in t)\n        return chr(sum_t - sum_s)\n", "sudoku-solver": "class Solution(object):\n    def solveSudoku(self, board):\n        self.backtrack(board, 0, 0)\n        \n    def backtrack(self, board, row, col):\n        # If all rows are processed, the board is solved\n        if row == 9:\n            return True\n        # If column is at the end, move to the next row\n        if col == 9:\n            return self.backtrack(board, row + 1, 0)\n        # If current cell is not empty, move to the next cell\n        if board[row][col] != '.':\n            return self.backtrack(board, row, col + 1)\n        # Try each digit from '1' to '9'\n        for d in '123456789':\n            if self.is_valid(board, row, col, d):\n                board[row][col] = d\n                if self.backtrack(board, row, col + 1):\n                    return True\n                board[row][col] = '.'  # Backtrack\n        return False  # No valid digit found, backtrack\n    \n    def is_valid(self, board, row, col, d):\n        # Check if 'd' is present in the current row or column\n        for i in range(9):\n            if board[row][i] == d:\n                return False\n            if board[i][col] == d:\n                return False\n        # Check if 'd' is present in the 3x3 subgrid\n        row_start = (row // 3) * 3\n        col_start = (col // 3) * 3\n        for i in range(row_start, row_start + 3):\n            for j in range(col_start, col_start + 3):\n                if board[i][j] == d:\n                    return False\n        return True\n", "recover-binary-search-tree": "class Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        # Initialize pointers for tracking the misplaced nodes and previous node\n        prev = first = second = None\n        current = root\n        \n        while current:\n            if current.left is None:\n                # Process the current node\n                if prev and prev.val > current.val:\n                    if not first:\n                        first = prev\n                    second = current\n                prev = current\n                current = current.right\n            else:\n                # Find the inorder predecessor of current\n                predecessor = current.left\n                while predecessor.right and predecessor.right != current:\n                    predecessor = predecessor.right\n                \n                if predecessor.right is None:\n                    # Create a thread to current and move left\n                    predecessor.right = current\n                    current = current.left\n                else:\n                    # Revert the thread and process current node\n                    predecessor.right = None\n                    if prev and prev.val > current.val:\n                        if not first:\n                            first = prev\n                        second = current\n                    prev = current\n                    current = current.right\n        \n        # Swap the values of the two misplaced nodes\n        if first and second:\n            first.val, second.val = second.val, first.val\n", "palindrome-linked-list": "class Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        # Step 1: Find the middle node using slow and fast pointers\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Step 2: Reverse the second half of the list starting from slow\n        prev = None\n        curr = slow\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # Step 3: Compare the first half and the reversed second half\n        first = head\n        second = prev\n        while second:\n            if first.val != second.val:\n                return False\n            first = first.next\n            second = second.next\n        \n        return True\n", "valid-perfect-square": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        left, right = 1, num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            mid_squared = mid * mid\n            \n            if mid_squared == num:\n                return True\n            elif mid_squared < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False\n", "counting-bits": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i >> 1] + (i & 1)\n        return ans\n", "remove-linked-list-elements": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        current = dummy.next\n        \n        while current:\n            if current.val == val:\n                prev.next = current.next\n            else:\n                prev = current\n            current = current.next\n        \n        return dummy.next\n", "scramble-string": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        memo = {}\n        n = len(s1)\n        \n        def helper(i: int, j: int, l: int) -> bool:\n            if (i, j, l) in memo:\n                return memo[(i, j, l)]\n            \n            # Base case: single character\n            if l == 1:\n                result = s1[i] == s2[j]\n                memo[(i, j, l)] = result\n                return result\n            \n            # Check if the current substrings are equal\n            s1_substring = s1[i:i+l]\n            s2_substring = s2[j:j+l]\n            if s1_substring == s2_substring:\n                memo[(i, j, l)] = True\n                return True\n            \n            # Check character frequency\n            if sorted(s1_substring) != sorted(s2_substring):\n                memo[(i, j, l)] = False\n                return False\n            \n            # Try all possible splits\n            for k in range(1, l):\n                # Case 1: no swap between left and right parts\n                if helper(i, j, k) and helper(i + k, j + k, l - k):\n                    memo[(i, j, l)] = True\n                    return True\n                # Case 2: swap left and right parts\n                if helper(i, j + (l - k), k) and helper(i + k, j, l - k):\n                    memo[(i, j, l)] = True\n                    return True\n            \n            # No valid scramble found\n            memo[(i, j, l)] = False\n            return False\n        \n        return helper(0, 0, n)\n", "simplify-path": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        stack = []\n        parts = path.split('/')\n        for part in parts:\n            if part == '.' or part == '':\n                continue\n            elif part == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(part)\n        return '/' + '/'.join(stack)\n", "word-search-ii": "class Solution:\n    def findWords(self, board, words):\n        # Build the Trie\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['word'] = word  # Store the word at the end node\n        \n        result = []\n        m, n = len(board), len(board[0])\n        \n        def dfs(r, c, node, visited):\n            char = board[r][c]\n            if char not in node:\n                return\n            \n            current_node = node[char]\n            \n            # Check if current node is the end of a word\n            if 'word' in current_node:\n                found_word = current_node['word']\n                result.append(found_word)\n                del current_node['word']  # Remove the word to avoid duplicates\n            \n            # Mark the current cell as visited\n            visited.add((r, c))\n            \n            # Directions: up, down, left, right\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited:\n                    dfs(nr, nc, current_node, visited)\n            \n            # Backtrack: remove current cell from visited\n            visited.remove((r, c))\n        \n        # Iterate over each cell in the board to start DFS\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in trie:\n                    visited = set()\n                    dfs(i, j, trie, visited)\n        \n        return result\n", "valid-anagram": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) != len(t):\n            return False\n        \n        counts = [0] * 26\n        for char in s:\n            counts[ord(char) - ord('a')] += 1\n        \n        for char in t:\n            index = ord(char) - ord('a')\n            counts[index] -= 1\n            if counts[index] < 0:\n                return False\n        \n        return True\n", "valid-sudoku": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        # Check each row for duplicates\n        for row in board:\n            filled = []\n            for cell in row:\n                if cell != '.':\n                    filled.append(cell)\n            if len(filled) != len(set(filled)):\n                return False\n        \n        # Check each column for duplicates\n        for col in range(9):\n            filled = []\n            for row in range(9):\n                cell = board[row][col]\n                if cell != '.':\n                    filled.append(cell)\n            if len(filled) != len(set(filled)):\n                return False\n        \n        # Check each 3x3 sub-box for duplicates\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                filled = []\n                for x in range(i, i + 3):\n                    for y in range(j, j + 3):\n                        cell = board[x][y]\n                        if cell != '.':\n                            filled.append(cell)\n                if len(filled) != len(set(filled)):\n                    return False\n        \n        return True\n", "fizz-buzz": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        answer = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer\n", "reverse-words-in-a-string": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ' '.join(reversed(s.split()))\n", "excel-sheet-column-number": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for c in columnTitle:\n            result = result * 26 + (ord(c) - ord('A') + 1)\n        return result\n", "candy": "from typing import List\n\nclass Solution:\n    def candy(self, ratings: List[int]) -> int:\n        if not ratings:\n            return 0\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        # Left to right pass\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        # Right to left pass\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)\n", "same-tree": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        # Check if both nodes are None\n        if p is None and q is None:\n            return True\n        # If one is None and the other is not\n        if p is None or q is None:\n            return False\n        # Compare current node values\n        if p.val != q.val:\n            return False\n        # Recursively check left and right subtrees\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n", "reorder-list": "class Solution(object):\n    def reorderList(self, head):\n        if not head or not head.next:\n            return\n        \n        # Find the middle node of the list\n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Split the list into two halves\n        second_half = slow.next\n        slow.next = None\n        \n        # Reverse the second half\n        prev = None\n        curr = second_half\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        # Merge the two halves\n        first = head\n        second = prev\n        \n        while first and second:\n            temp1 = first.next\n            temp2 = second.next\n            \n            first.next = second\n            second.next = temp1\n            \n            first = temp1\n            second = temp2\n", "word-pattern": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        \n        char_to_word = {}\n        word_to_char = {}\n        \n        for c, w in zip(pattern, words):\n            # Check character to word mapping\n            if c in char_to_word:\n                if char_to_word[c] != w:\n                    return False\n            else:\n                char_to_word[c] = w\n            \n            # Check word to character mapping\n            if w in word_to_char:\n                if word_to_char[w] != c:\n                    return False\n            else:\n                word_to_char[w] = c\n        \n        return True\n", "permutations": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        \n        def backtrack(current, remaining):\n            if not remaining:\n                result.append(current[:])\n                return\n            for i in range(len(remaining)):\n                current.append(remaining[i])\n                backtrack(current, remaining[:i] + remaining[i+1:])\n                current.pop()\n        \n        backtrack([], nums)\n        return result\n", "search-a-2d-matrix": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        m = len(matrix)\n        n = len(matrix[0])\n        \n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            row = mid // n\n            col = mid % n\n            current = matrix[row][col]\n            \n            if current == target:\n                return True\n            elif current < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False\n", "add-two-numbers": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        dummy = ListNode(0)\n        current = dummy\n        carry = 0\n        \n        while l1 or l2 or carry:\n            x = l1.val if l1 else 0\n            y = l2.val if l2 else 0\n            \n            sum_val = x + y + carry\n            carry = sum_val // 10\n            digit = sum_val % 10\n            \n            current.next = ListNode(digit)\n            current = current.next\n            \n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        \n        return dummy.next\n", "number-complement": "class Solution:\n    def findComplement(self, num: int) -> int:\n        mask = 1\n        while mask <= num:\n            mask <<= 1\n        mask -= 1\n        return mask ^ num\n", "arithmetic-slices-ii-subsequence": "from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [defaultdict(int) for _ in range(n)]\n        result = 0\n        \n        for i in range(n):\n            for j in range(i):\n                d = nums[i] - nums[j]\n                count_j = dp[j][d]\n                result += count_j\n                dp[i][d] += count_j + 1\n                \n        return result\n", "text-justification": "class Solution:\n    def fullJustify(self, words, maxWidth):\n        lines = []\n        current_line = []\n        sum_words = 0\n        \n        for word in words:\n            if current_line:\n                required = sum_words + len(word) + len(current_line)\n                if required > maxWidth:\n                    lines.append(self.process_line(current_line, sum_words, maxWidth, False))\n                    current_line = [word]\n                    sum_words = len(word)\n                else:\n                    current_line.append(word)\n                    sum_words += len(word)\n            else:\n                current_line.append(word)\n                sum_words = len(word)\n        \n        if current_line:\n            lines.append(self.process_line(current_line, sum_words, maxWidth, True))\n        \n        return lines\n    \n    def process_line(self, line, sum_words, maxWidth, is_last_line):\n        if is_last_line or len(line) == 1:\n            spaces_needed = maxWidth - (sum_words + (len(line) - 1))\n            return ' '.join(line) + ' ' * spaces_needed\n        else:\n            gaps = len(line) - 1\n            spaces_needed = maxWidth - sum_words\n            space_per = spaces_needed // gaps\n            extra = spaces_needed % gaps\n            \n            justified = []\n            for i in range(gaps):\n                space = space_per + 1 if i < extra else space_per\n                justified.append(line[i] + ' ' * space)\n            justified.append(line[-1])\n            return ''.join(justified)\n", "binary-tree-postorder-traversal": "from typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        stack1 = [root]\n        stack2 = []\n        result = []\n        \n        while stack1:\n            node = stack1.pop()\n            stack2.append(node)\n            if node.left:\n                stack1.append(node.left)\n            if node.right:\n                stack1.append(node.right)\n        \n        while stack2:\n            result.append(stack2.pop().val)\n        \n        return result\n", "container-with-most-water": "class Solution(object):\n    def maxArea(self, height):\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            current_height = min(height[left], height[right])\n            current_width = right - left\n            current_area = current_height * current_width\n            max_area = max(max_area, current_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area\n", "concatenated-words": "from typing import List\n\nclass Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        # Sort words by their length\n        words.sort(key=lambda x: len(x))\n        result = []\n        current_set = set()\n        i = 0\n        n = len(words)\n        \n        while i < n:\n            # Collect all words of the current length\n            current_length = len(words[i])\n            j = i\n            current_group = []\n            while j < n and len(words[j]) == current_length:\n                current_group.append(words[j])\n                j += 1\n            \n            # Check each word in current group\n            temp_result = []\n            for word in current_group:\n                if self.is_concatenated(word, current_set):\n                    temp_result.append(word)\n            \n            # Add all words in current group to the current_set\n            for word in current_group:\n                current_set.add(word)\n            \n            # Extend the result with the concatenated words found\n            result.extend(temp_result)\n            i = j\n        \n        return result\n    \n    def is_concatenated(self, s: str, word_set: set) -> bool:\n        if not word_set:\n            return False\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True  # Empty prefix is valid\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in word_set:\n                    dp[i] = True\n                    break\n        \n        return dp[n]\n", "base-7": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        if num == 0:\n            return \"0\"\n        \n        negative = num < 0\n        n = abs(num)\n        digits = []\n        \n        while n > 0:\n            digits.append(str(n % 7))\n            n = n // 7\n        \n        digits = digits[::-1]  # Reverse the list to get the correct order\n        \n        if negative:\n            digits.insert(0, '-')\n        \n        return ''.join(digits)\n", "nim-game": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n % 4 != 0\n", "n-queens-ii": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        count = 0\n\n        def backtrack(row, cols, diag1, diag2):\n            nonlocal count\n            if row == n:\n                count += 1\n                return\n            for col in range(n):\n                if col in cols or (row + col) in diag1 or (row - col) in diag2:\n                    continue\n                cols.add(col)\n                diag1.add(row + col)\n                diag2.add(row - col)\n                backtrack(row + 1, cols, diag1, diag2)\n                cols.remove(col)\n                diag1.remove(row + col)\n                diag2.remove(row - col)\n        \n        backtrack(0, set(), set(), set())\n        return count\n", "n-queens": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        result = []\n        path = []\n        self.backtrack(n, path, result)\n        return result\n    \n    def backtrack(self, n, path, result):\n        if len(path) == n:\n            solution = []\n            for c in path:\n                row = ['.'] * n\n                row[c] = 'Q'\n                solution.append(''.join(row))\n            result.append(solution)\n            return\n        \n        for c in range(n):\n            if self.is_valid(path, c):\n                path.append(c)\n                self.backtrack(n, path, result)\n                path.pop()\n    \n    def is_valid(self, path, c):\n        current_row = len(path)\n        for r in range(current_row):\n            if path[r] == c or abs(c - path[r]) == current_row - r:\n                return False\n        return True\n", "word-search": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        m = len(board)\n        if m == 0:\n            return False\n        n = len(board[0])\n        if n == 0:\n            return False\n        word_len = len(word)\n        if word_len == 0:\n            return True  # Assuming empty word is allowed; adjust based on constraints\n        \n        # Pre-check: if word is longer than total cells\n        if word_len > m * n:\n            return False\n        \n        # Pre-check: all characters in word must be present in the board\n        word_chars = set(word)\n        board_chars = set()\n        for i in range(m):\n            for j in range(n):\n                board_chars.add(board[i][j])\n        if not word_chars.issubset(board_chars):\n            return False\n        \n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        \n        def backtrack(row, col, index):\n            if index == word_len:\n                return True\n            if row < 0 or row >= m or col < 0 or col >= n:\n                return False\n            if board[row][col] != word[index]:\n                return False\n            \n            # Mark the cell as visited by changing its value\n            temp = board[row][col]\n            board[row][col] = '#'\n            \n            # Explore all four directions\n            result = False\n            for dx, dy in directions:\n                new_row, new_col = row + dx, col + dy\n                if backtrack(new_row, new_col, index + 1):\n                    result = True\n                    break  # Early exit if found\n            \n            # Restore the cell's value\n            board[row][col] = temp\n            return result\n        \n        # Iterate through each cell in the board\n        for i in range(m):\n            for j in range(n):\n                if backtrack(i, j, 0):\n                    return True\n        return False\n", "merge-sorted-array": "from typing import List\n\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Merges two sorted arrays into the first array in-place.\n        \n        Parameters:\n        nums1 (List[int]): The first sorted array with extra space.\n        m (int): The number of elements in the first array.\n        nums2 (List[int]): The second sorted array.\n        n (int): The number of elements in the second array.\n        \"\"\"\n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        # Merge from the end of both arrays\n        while i >= 0 and j >= 0:\n            if nums1[i] < nums2[j]:\n                nums1[k] = nums2[j]\n                j -= 1\n            else:\n                nums1[k] = nums1[i]\n                i -= 1\n            k -= 1\n        \n        # If there are remaining elements in nums2, copy them\n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1\n", "third-maximum-number": "class Solution:\n    def thirdMax(self, nums):\n        m1 = m2 = m3 = float('-inf')\n        for num in nums:\n            if num in (m1, m2, m3):\n                continue\n            if num > m1:\n                m3 = m2\n                m2 = m1\n                m1 = num\n            elif num > m2:\n                m3 = m2\n                m2 = num\n            elif num > m3:\n                m3 = num\n        return m3 if m3 != float('-inf') else m1\n"}
