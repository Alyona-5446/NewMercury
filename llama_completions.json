{"summary-ranges": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + '->' + str(end))\n                start = nums[i]\n                end = nums[i]\n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + '->' + str(end))\n        return res", "license-key-formatting": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        n = len(s)\n        if n % k == 0:\n            return s\n        else:\n            num = n // k\n            if num % 2 == 0:\n                return s[:k] + '-' + s[k:]\n            else:\n                return s[:k - 1] + '-' + s[k - 1:]", "plus-one": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        return [1] + digits", "perfect-number": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        if num == 2:\n            return True\n        divisor = 2\n        sum = 0\n        while divisor * divisor < num:\n            if num % divisor == 0:\n                sum += divisor\n                if divisor * divisor < num:\n                    sum += num // divisor\n            divisor += 1\n        if divisor * divisor == num:\n            sum += divisor\n        return sum == num", "fibonacci-number": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        \n        a, b = 0, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b", "number-of-segments-in-a-string": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "reverse-vowels-of-a-string": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set(\"aeiouAEIOU\")\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n        return \"\".join(s)", "missing-number": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        return n*(n+1)//2 - sum(nums)", "add-binary": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            return self.addBinary(b, a)\n        carry = 0\n        res = \"\"\n        for i in range(len(b)):\n            carry, bit = divmod(int(a[-1-i]) + int(b[-1-i]) + carry, 2)\n            res = str(bit) + res\n        for i in range(len(a) - len(b)):\n            carry, bit = divmod(int(a[-1-i]) + carry, 2)\n            res = str(bit) + res\n        if carry:\n            res = str(carry) + res\n        return res", "remove-duplicates-from-sorted-array": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "convert-a-number-to-hexadecimal": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2 ** 32 + num\n        \n        result = \"\"\n        hex_map = {0: \"0\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\", 8: \"8\", 9: \"9\", 10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        \n        while num:\n            result += hex_map[num % 16]\n            num //= 16\n        \n        return result[::-1]", "first-unique-character-in-a-string": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Solution 1\n        # return s.index(min(set(s), key=s.count)) if len(set(s)) > 0 else -1\n        \n        # Solution 2\n        # d = {}\n        # for i in range(len(s)):\n        #     if s[i] not in d:\n        #         d[s[i]] = i\n        #     else:\n        #         d[s[i]] = -1\n        # return min(d.values())\n        \n        # Solution 3\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = [i]\n            else:\n                d[s[i]].append(i)\n        for k in d:\n            if len(d[k]) == 1:\n                return d[k][0]\n        return -1\n        \n        \n        # Solution 4\n        # return min([s.index(k) for k in set(s) if s.count(k) == 1] + [-1])\n        \n        # Solution 5\n        # d = {}\n        # for i in range(len(s)):\n        #     if s[i] not in d:\n        #         d[s[i]] = [i]\n        #     else:\n        #         d[s[i]].append(i)\n        # return min(d.values(), key=len) if len(d) > 0 else -1\n        \n        # Solution 6\n        # return min(set(s), key=s.index) if len(set(s)) > 0 else -1\n        \n        # Solution 7\n        # d = {}\n        # for i in range(len(s)):\n        #     if s[i] not in d:\n        #         d[s[i]] = [i]\n        #     else:\n        #         d[s[i]].append(i)\n        # return min(d.values(), key=len) if len(d) > 0 else -1\n        \n        # Solution 8\n        # d = {}\n        #", "max-consecutive-ones": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        max_count = 0\n        count = 0\n        for num in nums:\n            if num == 1:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                count = 0\n        if count > max_count:\n            max_count = count\n        return max_count", "count-complete-tree-nodes": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        def height(root):\n            h = 0\n            while root.left:\n                h += 1\n                root = root.left\n            return h\n        \n        def count(root, h):\n            if root is None:\n                return 0\n            \n            if h == 0:\n                return 1\n            \n            return count(root.left, h - 1) + count(root.right, h - 1)\n        \n        h = height(root)\n        return count(root, h)", "add-strings": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = ''\n        carry = 0\n        for i in range(max(len(num1), len(num2))):\n            n1 = int(num1[i]) if i < len(num1) else 0\n            n2 = int(num2[i]) if i < len(num2) else 0\n            carry, d = divmod(n1 + n2 + carry, 10)\n            res += str(d)\n        if carry:\n            res += str(carry)\n        return res[::-1]", "valid-parentheses": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for c in s:\n            if c == '(' or c == '[' or c == '{':\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                if c == ']' and stack[-1]!= '[' or c == ')' and stack[-1]!= '(' or c == '}' and stack[-1]!= '{':\n                    return False\n                stack.pop()\n        return not stack", "contains-duplicate-ii": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        d = {}\n        for i, num in enumerate(nums):\n            if num in d and i - d[num] <= k:\n                return True\n            d[num] = i\n        \n        return False", "assign-cookies": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"", "keyboard-row": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"", "remove-duplicates-from-sorted-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        \n        while cur and cur.next:\n            if cur.val == cur.next.val:\n                while cur.next and cur.val == cur.next.val:\n                    cur.next = cur.next.next\n                prev.next = cur.next\n                cur = cur.next\n            else:\n                prev = cur\n                cur = cur.next\n        \n        return dummy.next", "longest-palindrome": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "minimum-depth-of-binary-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        queue = collections.deque([(root, 1)])\n        \n        while queue:\n            node, depth = queue.popleft()\n            if not node.left and not node.right:\n                return depth\n            \n            if node.left:\n                queue.append((node.left, depth + 1))\n            if node.right:\n                queue.append((node.right, depth + 1))", "arranging-coins": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n\n# Time Complexity: O(sqrt(n))\n# Space Complexity: O(1)", "longest-uncommon-subsequence-i": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))", "palindrome-number": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 10 == 0:\n            return False\n        \n        y = 0\n        while x > y:\n            y = y*10 + x % 10\n            x = x // 10\n        return x == y or x == y // 10", "is-subsequence": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "climbing-stairs": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n\n#Complexity Analysis\n# Time complexity : O(n)\n# Space complexity : O(n)", "detect-capital": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n# Time Complexity: O(n)\n# Space Complexity: O(1)", "best-time-to-buy-and-sell-stock": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"", "binary-tree-inorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n            \n        return res", "convert-sorted-array-to-binary-search-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(nums):\n            if not nums:\n                return None\n            \n            mid = len(nums) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums[:mid])\n            root.right = helper(nums[mid+1:])\n            return root\n        \n        return helper(nums)", "binary-watch": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(num):\n            return num >= 0 and num <= 11\n        \n        def toStr(num):\n            if num == 0:\n                return \"00\"\n            elif num == 1:\n                return \"01\"\n            elif num == 2:\n                return \"10\"\n            elif num == 3:\n                return \"11\"\n            elif num == 4:\n                return \"02\"\n            elif num == 5:\n                return \"20\"\n            elif num == 6:\n                return \"21\"\n            elif num == 7:\n                return \"30\"\n            elif num == 8:\n                return \"31\"\n            elif num == 9:\n                return \"03\"\n            elif num == 10:\n                return \"13\"\n            elif num == 11:\n                return \"12\"\n        \n        result = []\n        for i in range(12):\n            for j in range(60):\n                if (bin(i) + bin(j)).count(\"1\") == turnedOn:\n                    result.append(toStr(i) + \":\" + toStr(j))\n        return result", "pascals-triangle": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = []\n        for row in range(numRows):\n            if row == 0:\n                result.append([1])\n            elif row == 1:\n                result.append([1,1])\n            else:\n                temp = [1]\n                for i in range(1, row):\n                    temp.append(result[row-1][i-1] + result[row-1][i])\n                temp.append(1)\n                result.append(temp)\n        return result", "power-of-three": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (3**19)%n == 0", "valid-palindrome": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = ''.join(filter(lambda x: x.isalnum(), s.lower()))\n        return s == s[::-1]", "ugly-number": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "sum-of-left-leaves": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sumOfLeftLeavesHelper(root, isLeft):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return 0\n            if root.left and not root.left.left and not root.left.right:\n                return root.left.val if isLeft else 0\n            return sumOfLeftLeavesHelper(root.left, True) + sumOfLeftLeavesHelper(root.right, False)\n        return sumOfLeftLeavesHelper(root, False)", "two-sum": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"", "majority-element": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n            \n        return candidate", "reverse-string": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # We can use two pointers, one at the beginning and one at the end\n        # Then we can swap the values at those two pointers until the pointers cross\n        # The end of the array\n        \n        # We can also use a while loop and swap the first and last values\n        # Then increment the first pointer and decrement the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a while loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then increment the first pointer and decrement the last pointer\n        # until the pointers cross\n        \n        # We can also use a while loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then increment the first pointer and decrement the last pointer\n        # until the pointers cross\n        \n        # We can also use a while loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then increment the first pointer and decrement the last pointer\n        # until the pointers cross\n        \n        # We can also use a while loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then increment the first pointer and decrement the last pointer\n        # until the pointers cross\n        \n        # We can also use a while loop and swap the first and last values\n        # Then decrement the first pointer and increment the last pointer\n        # until the pointers cross\n        \n        # We can also use a for loop and swap the first and last values\n        # Then increment the first pointer and decrement", "reverse-linked-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev", "path-sum": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        def helper(root, targetSum):\n            if not root:\n                return False\n            if not root.left and not root.right:\n                if targetSum == root.val:\n                    return True\n                else:\n                    return False\n            if root.left:\n                targetSum -= root.val\n                if helper(root.left, targetSum):\n                    return True\n                targetSum += root.val\n            if root.right:\n                targetSum -= root.val\n                if helper(root.right, targetSum):\n                    return True\n                targetSum += root.val\n            return False\n        \n        return helper(root, targetSum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        stack = [(root, root.val)]\n        while stack:\n            node, val = stack.pop()\n            if not node.left and not node.right and val == targetSum:\n                return True\n            if node.left:\n                stack.append((node.left, val + node.left.val))\n            if node.right:\n                stack.append((node.right, val + node.right.val))\n        return False", "add-digits": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        return (num - 1) % 9 + 1", "single-number": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Using XOR operator\n        # a ^ b = 0 if a = b\n        # a ^ b = a + b if a!= b\n        res = 0\n        for num in nums:\n            res ^= num\n        return res", "length-of-last-word": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        s = s.strip()\n        if not s:\n            return 0\n        \n        return len(s.split()[-1])", "happy-number": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution()\n# param_1 = obj.isHappy(n)", "search-insert-position": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target < nums[0]:\n            return 0\n        if target > nums[-1]:\n            return len(nums)\n        for i in range(len(nums)):\n            if nums[i] == target:\n                return i\n            if nums[i] < target and nums[i+1] > target:\n                return i+1", "relative-ranks": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Create a list of tuples (score, index)\n        # Sort the list in descending order\n        # Assign ranks\n        # Return a list of ranks\n        # O(nlogn) time, O(n) space\n        \n        ranks = [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"]\n        scores = [(s, i) for i, s in enumerate(score)]\n        scores.sort(reverse=True)\n        ranks = ranks[:len(scores)]\n        for i, s in enumerate(scores):\n            scores[i] = (s[0], ranks.pop(0))\n        return [s[1] for s in sorted(scores)]", "hamming-distance": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count", "binary-tree-paths": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return []\n            if not root.left and not root.right:\n                return [path + str(root.val)]\n            paths = []\n            if root.left:\n                paths.extend(dfs(root.left, path + str(root.val) + \"->\"))\n            if root.right:\n                paths.extend(dfs(root.right, path + str(root.val) + \"->\"))\n            return paths\n        \n        return dfs(root, \"\")", "repeated-substring-pattern": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"", "sqrtx": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid * mid <= x < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > x:\n                right = mid\n            else:\n                left = mid + 1\n        return left", "roman-to-integer": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        for i in range(len(s)):\n            if i < len(s)-1 and roman[s[i]] < roman[s[i+1]]:\n                result -= roman[s[i]]\n            else:\n                result += roman[s[i]]\n        return result", "contains-duplicate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Use a hash table to keep track of the numbers we've seen so far\n        # If we see a number we've seen before, return true\n        # If we don't see a number, add it to the table\n        # After we've checked every number, return false\n        nums_seen_so_far = {}\n        for num in nums:\n            if num in nums_seen_so_far:\n                return True\n            nums_seen_so_far[num] = True\n        return False", "pascals-triangle-ii": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        res = [1]\n        for i in range(1, rowIndex+1):\n            res = [1] + [res[j]*(i-j)//(j+1) for j in range(i-1)] + [1]\n        return res", "construct-the-rectangle": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def isValid(a, b):\n            return a*b == area and a >= b\n        \n        left = int(math.sqrt(area))\n        right = area // left\n        \n        while left >= right:\n            if isValid(left, right):\n                return [left, right]\n            left -= 1\n            right += 1\n        return [0, 0]", "balanced-binary-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def check(root):\n            if not root:\n                return 0\n            left = check(root.left)\n            right = check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n        \n        return check(root)!= -1", "power-of-two": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        return n & (n-1) == 0", "excel-sheet-column-title": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        if columnNumber == 0:\n            return \"\"\n        else:\n            return self.convertToTitle((columnNumber-1)//26)+chr((columnNumber-1)%26+ord('A'))", "isomorphic-strings": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"", "maximum-depth-of-binary-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return self.getDepth(root, 1)\n    \n    def getDepth(self, root, depth):\n        if root is None:\n            return depth\n        \n        leftDepth = self.getDepth(root.left, depth + 1)\n        rightDepth = self.getDepth(root.right, depth + 1)\n        \n        return max(leftDepth, rightDepth)", "intersection-of-two-arrays-ii": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n                \n        return res", "minimum-absolute-difference-in-bst": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"", "find-mode-in-binary-search-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root, dic):\n            if not root:\n                return\n            inorder(root.left, dic)\n            dic[root.val] += 1\n            inorder(root.right, dic)\n            \n        dic = collections.defaultdict(int)\n        inorder(root, dic)\n        max_count = max(dic.values())\n        return [key for key in dic.keys() if dic[key] == max_count]", "find-the-index-of-the-first-occurrence-in-a-string": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"", "find-all-numbers-disappeared-in-an-array": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n\n        result = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                result.append(i+1)\n        return result", "symmetric-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"", "binary-tree-preorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n                \n        return result\n        \n        # stack = [root]\n        # result = []\n        \n        # while stack:\n        #     node = stack.pop()\n        #     result.append(node.val)\n        #     if node.right:\n        #         stack.append(node.right)\n        #     if node.left:\n        #         stack.append(node.left)\n        # return result", "power-of-four": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n < 0:\n            return False\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 4!= 0:\n            return False\n        return self.isPowerOfFour(n/4)", "invert-binary-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not root:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root", "intersection-of-two-arrays": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        s1 = set(nums1)\n        s2 = set(nums2)\n        return list(s1 & s2)", "merge-two-sorted-lists": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2", "find-the-difference": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        for i in range(len(s)):\n            s = s.replace(s[i], '', 1)\n            t = t.replace(t[i], '', 1)\n        return t", "palindrome-linked-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if head is None:\n            return True\n        \n        # Find the middle of the list\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        # Reverse the second half\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n            \n        # Check if the second half is the same as the first half\n        slow = prev\n        while head and slow:\n            if head.val!= slow.val:\n                return False\n            head = head.next\n            slow = slow.next\n        return True", "valid-perfect-square": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 1, num\n        while l <= r:\n            mid = (l + r) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False", "counting-bits": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"", "remove-linked-list-elements": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next:\n            if prev.next.val == val:\n                prev.next = prev.next.next\n            else:\n                prev = prev.next\n        \n        return dummy.next", "valid-anagram": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s)!= len(t):\n            return False\n        s_dict = {}\n        for i in s:\n            if i not in s_dict:\n                s_dict[i] = 1\n            else:\n                s_dict[i] += 1\n        for i in t:\n            if i not in s_dict or s_dict[i] == 0:\n                return False\n            else:\n                s_dict[i] -= 1\n        return True", "fizz-buzz": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        result = []\n        for i in range(1, n+1):\n            if i%15 == 0:\n                result.append('FizzBuzz')\n            elif i%5 == 0:\n                result.append('Buzz')\n            elif i%3 == 0:\n                result.append('Fizz')\n            else:\n                result.append(str(i))\n        return result", "excel-sheet-column-number": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        num = 0\n        for i in range(len(columnTitle)):\n            num += (ord(columnTitle[i])-ord('A')+1)*(26**(len(columnTitle)-i-1))\n        return num", "same-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(p, q):\n            if not p and not q:\n                return True\n            if not p or not q:\n                return False\n            if p.val!= q.val:\n                return False\n            return dfs(p.left, q.left) and dfs(p.right, q.right)\n        \n        return dfs(p, q)", "word-pattern": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"", "number-complement": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        return num ^ ((1 << num.bit_length()) - 1)", "binary-tree-postorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        res = []\n        stack = []\n        node = root\n        while node or stack:\n            if node:\n                stack.append(node)\n                res.append(node.val)\n                node = node.right\n            else:\n                peek = stack[-1]\n                node = stack.pop()\n                node = node.left\n                if node == peek.left:\n                    res.append(peek.val)\n                    peek.left = None\n                else:\n                    stack.append(peek)\n                    node = peek\n        return res[::-1]", "base-7": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        \n        result = \"\"\n        while num:\n            result = str(num%7) + result\n            num //= 7\n            \n        return result", "nim-game": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"", "merge-sorted-array": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        i, j = 0, 0\n        while i < m and j < n:\n            if nums1[i] < nums2[j]:\n                i += 1\n                nums1[i] = nums2[j]\n                j += 1\n            else:\n                i += 1\n                nums1[i] = nums1[i-1]\n        while j < n:\n            nums1[i] = nums2[j]\n            i += 1\n            j += 1", "third-maximum-number": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            nums.discard(max(nums))\n            nums.discard(max(nums))\n            return max(nums)", "spiral-matrix": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right, top, bottom = 0, n-1, 0, m-1\n        res = []\n        while True:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            if top > bottom:\n                break\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            if left > right:\n                break\n            \n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            if top > bottom:\n                break\n            \n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n            if left > right:\n                break\n        return res", "two-sum-ii-input-array-is-sorted": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"", "sum-root-to-leaf-numbers": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, path):\n            if not node:\n                return 0\n            \n            path = path * 10 + node.val\n            \n            if not node.left and not node.right:\n                return path\n            \n            return dfs(node.left, path) + dfs(node.right, path)\n        \n        return dfs(root, 0)", "gas-station": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"", "longest-consecutive-sequence": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = set(nums)\n        max_len = 0\n        for num in nums:\n            if num-1 not in nums:\n                cur_len = 1\n                while num+1 in nums:\n                    cur_len += 1\n                    num += 1\n                max_len = max(cur_len, max_len)\n        return max_len", "find-first-and-last-position-of-element-in-sorted-array": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def search(nums, target, start, end):\n            if start > end:\n                return -1\n            mid = (start + end) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                return search(nums, target, start, mid - 1)\n            else:\n                return search(nums, target, mid + 1, end)\n        \n        start = search(nums, target, 0, len(nums) - 1)\n        if start == -1:\n            return [-1, -1]\n        end = start\n        while end < len(nums) and nums[end] == target:\n            end += 1\n        return [start, end - 1]", "jump-game-ii": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return 0\n        jumps = 0\n        max_reach = 0\n        curr_reach = 0\n        for i in range(len(nums)-1):\n            max_reach = max(max_reach, nums[i] + i)\n            if i == curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n        return jumps", "sort-colors": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        p0 = 0\n        p2 = len(nums) - 1\n        \n        i = 0\n        while i <= p2:\n            if nums[i] == 0:\n                nums[i], nums[p0] = nums[p0], nums[i]\n                p0 += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[i], nums[p2] = nums[p2], nums[i]\n                p2 -= 1\n            else:\n                i += 1", "next-permutation": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        if len(nums) < 2:\n            return\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j > i and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        self.reverse(nums, i+1)\n        \n    def reverse(self, nums, i):\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1", "maximum-gap": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "binary-tree-level-order-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        queue = [root]\n        res = []\n        while queue:\n            temp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left is not None:\n                    queue.append(node.left)\n                if node.right is not None:\n                    queue.append(node.right)\n            res.append(temp)\n            \n        return res", "interleaving-string": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1)+len(s2)!=len(s3):\n            return False\n        dp = [[False for _ in range(len(s2)+1)] for _ in range(len(s1)+1)]\n        for i in range(len(s1)+1):\n            for j in range(len(s2)+1):\n                if i==0 and j==0:\n                    dp[i][j] = True\n                elif i==0:\n                    dp[i][j] = s2[:j]==s3[:j]\n                elif j==0:\n                    dp[i][j] = s1[:i]==s3[:i]\n                else:\n                    dp[i][j] = (dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1])\n        return dp[-1][-1]", "reverse-linked-list-ii": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = None\n        cur = dummy\n        i = 0\n        while i < left-1:\n            prev = cur\n            cur = cur.next\n            i += 1\n        tail = cur\n        while i < right:\n            tmp = cur.next\n            cur.next = prev\n            prev = cur\n            cur = tmp\n            i += 1\n        tail.next = cur\n        if prev:\n            prev.next = cur\n        else:\n            dummy.next = cur\n        return dummy.next", "construct-binary-tree-from-inorder-and-postorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root", "binary-tree-level-order-traversal-ii": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if root is None:\n            return []\n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result[::-1]", "decode-ways": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "gray-code": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        result = [0]\n        for i in range(n):\n            for j in range(len(result)-1, -1, -1):\n                result.append(result[j] | 1 << i)\n        return result", "word-break": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"", "validate-binary-search-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, min_val, max_val):\n            if not node:\n                return True\n            if not (min_val < node.val < max_val):\n                return False\n            return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n        \n        return helper(root, float('-inf'), float('inf'))", "insert-interval": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        s, e = newInterval\n        i = 0\n        while i < len(intervals) and intervals[i][1] < s:\n            res.append(intervals[i])\n            i += 1\n        while i < len(intervals) and intervals[i][0] <= e:\n            s = min(s, intervals[i][0])\n            e = max(e, intervals[i][1])\n            i += 1\n        res.append([s,e])\n        while i < len(intervals):\n            res.append(intervals[i])\n            i += 1\n        return res", "palindrome-partitioning": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        res = []\n        def dfs(s,tmp):\n            if not s:\n                res.append(tmp)\n                return\n            for i in range(1,len(s)+1):\n                if s[:i] == s[:i][::-1]:\n                    dfs(s[i:],tmp+[s[:i]])\n        dfs(s,[])\n        return res", "unique-paths": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"", "multiply-strings": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Convert string to integer\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # Multiply the two numbers\n        product = num1 * num2\n        \n        # Convert the product back to string\n        return str(product)", "combination-sum-ii": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.helper(candidates, target, 0, [], res)\n        return res\n    \n    def helper(self, nums, target, start, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n        for i in range(start, len(nums)):\n            self.helper(nums, target - nums[i], i + 1, path + [nums[i]], res)", "construct-binary-tree-from-preorder-and-inorder-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        mid = inorder.index(root.val)\n        \n        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])\n        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])\n        \n        return root", "binary-tree-zigzag-level-order-traversal": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        result = []\n        level = [root]\n        direction = 1\n        while level:\n            result.append([node.val for node in level])\n            level = [child for node in level for child in (node.left, node.right) if child]\n            level.reverse()\n            direction *= -1\n            \n        return result", "rotate-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or k==0:\n            return head\n        \n        l = 1\n        curr = head\n        while curr.next:\n            l += 1\n            curr = curr.next\n        curr.next = head\n        \n        k = k%l\n        for i in range(l-k-1):\n            curr = curr.next\n        head = curr.next\n        curr.next = None\n        \n        return head", "divide-two-integers": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if divisor == 0:\n            return 2147483647\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == 1:\n            return 1\n        \n        if dividend == -1:\n            return -1\n        \n        if divisor == 1:\n            return dividend\n        \n        if divisor == -1:\n            return -dividend\n        \n        if dividend > 0:\n            if divisor > 0:\n                res = self.helper(dividend, divisor)\n            else:\n                res = -self.helper(-dividend, -divisor)\n        else:\n            if divisor > 0:\n                res = -self.helper(-dividend, divisor)\n            else:\n                res = self.helper(dividend, -divisor)\n        \n        if res > 2147483647:\n            return 2147483647\n        if res < -2147483648:\n            return -2147483648\n        return res\n    \n    def helper(self, dividend, divisor):\n        if dividend > 0:\n            if divisor > 0:\n                res = self.helper(dividend - divisor, divisor) + 1\n            else:\n                res = -self.helper(dividend - -divisor, -divisor) + 1\n        else:\n            if divisor > 0:\n                res = -self.helper(dividend - divisor, divisor) + 1\n            else:\n                res = self.helper(dividend - -divisor, -divisor) + 1\n        return res", "surrounded-regions": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(x, y):\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == \"O\":\n                board[x][y] = \"*\"\n                dfs(x+1, y)\n                dfs(x-1, y)\n                dfs(x, y+1)\n                dfs(x, y-1)\n        \n        for i in range(len(board)):\n            dfs(i, 0)\n            dfs(i, len(board[0])-1)\n        for j in range(len(board[0])):\n            dfs(0, j)\n            dfs(len(board)-1, j)\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == \"*\":\n                    board[i][j] = \"O\"\n                elif board[i][j] == \"O\":\n                    board[i][j] = \"X\"", "4sum": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res", "triangle": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"", "swap-nodes-in-pairs": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None or head.next is None:\n            return head\n        else:\n            newHead = head.next\n            head.next = self.swapPairs(head.next.next)\n            newHead.next = head\n            return newHead", "partition-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        left_head = ListNode(0)\n        left = left_head\n        right_head = ListNode(0)\n        right = right_head\n        \n        while head:\n            if head.val < x:\n                left.next = head\n                left = left.next\n            else:\n                right.next = head\n                right = right.next\n            head = head.next\n        \n        right.next = None\n        left.next = right_head.next\n        return left_head.next", "permutations-ii": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, ret):\n            if not nums:\n                ret.append(path)\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], ret)\n        \n        ret = []\n        backtrack(nums, [], ret)\n        return ret", "jump-game": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return True\n        \n        max_pos = 0\n        for i in range(n):\n            if i > max_pos:\n                return False\n            max_pos = max(max_pos, i + nums[i])\n            if max_pos >= n - 1:\n                return True\n        return False", "minimum-path-sum": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "count-and-say": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"", "search-in-rotated-sorted-array": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums)-1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1", "letter-combinations-of-a-phone-number": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phoneMap = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6':'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        result = []\n        self.dfs(digits, phoneMap, \"\", result)\n        return result\n    \n    def dfs(self, digits, phoneMap, path, result):\n        if not digits:\n            result.append(path)\n            return\n        \n        for c in phoneMap[digits[0]]:\n            self.dfs(digits[1:], phoneMap, path + c, result)", "combination-sum": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"", "spiral-matrix-ii": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        result = [[0 for i in range(n)] for j in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                num += 1\n                result[top][i] = num\n            for i in range(top + 1, bottom):\n                num += 1\n                result[i][right] = num\n            for i in range(right, left - 1, -1):\n                num += 1\n                result[bottom][i] = num\n            for i in range(bottom - 1, top, -1):\n                num += 1\n                result[i][left] = num\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return result", "reverse-integer": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x<0:\n            x = int(str(x)[::-1][1:])*-1\n        else:\n            x = int(str(x)[::-1])\n        if x>2**31-1 or x<-2**31:\n            return 0\n        return x", "rotate-image": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                matrix[i][j], matrix[j][n-i-1], matrix[n-i-1][n-j-1], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j], matrix[j][n-i-1], matrix[n-i-1][n-j-1]", "maximum-product-subarray": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        res = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                cur_max, cur_min = max(cur_max * nums[i], nums[i]), min(cur_min * nums[i], nums[i])\n            else:\n                cur_max, cur_min = max(cur_min * nums[i], nums[i]), min(cur_max * nums[i], nums[i])\n            res = max(res, cur_max)\n        return res", "longest-substring-without-repeating-characters": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "insertion-sort-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        cur = dummy\n        while cur.next:\n            if cur.next.val >= cur.val:\n                cur = cur.next\n            else:\n                temp = cur.next\n                cur.next = temp.next\n                prev = dummy\n                while prev.next.val < temp.val:\n                    prev = prev.next\n                temp.next = prev.next\n                prev.next = temp\n                \n        return dummy.next", "remove-duplicates-from-sorted-list-ii": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == curr.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head", "3sum": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        result = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    result.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n        return result", "edit-distance": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for i in range(n+1):\n            dp[0][i] = i\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        return dp[m][n]", "compare-version-numbers": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2))):\n            v1_i = int(v1[i]) if i < len(v1) else 0\n            v2_i = int(v2[i]) if i < len(v2) else 0\n            if v1_i < v2_i:\n                return -1\n            elif v1_i > v2_i:\n                return 1\n        return 0", "best-time-to-buy-and-sell-stock-ii": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"", "unique-binary-search-trees": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"", "single-number-ii": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of zero and some bit is the bit itself\n        # XOR is commutative\n        # XOR is associative\n        # XOR of two same bits is 0\n        # XOR of three same bits is 0\n        # XOR of four same bits is 0\n        # XOR of five same bits is 0\n        # XOR of six same bits is 0\n        # XOR of seven same bits is 0\n        # XOR of eight same bits is 0\n        # XOR of nine same bits is 0\n        # XOR of ten same bits is 0\n        # XOR of eleven same bits is 0\n        # XOR of twelve same bits is 0\n        # XOR of thirteen same bits is 0\n        # XOR of fourteen same bits is 0\n        # XOR of fifteen same bits is 0\n        # XOR of sixteen same bits is 0\n        # XOR of seventeen same bits is 0\n        # XOR of eighteen same bits is 0\n        # XOR of nineteen same bits is 0\n        # XOR of twenty same bits is 0\n        # XOR of twenty one same bits is 0\n        # XOR of twenty two same bits is 0\n        # XOR of twenty three same bits is 0\n        # XOR of twenty four same bits is 0\n        # XOR of twenty five same bits is 0\n        # XOR of twenty six same bits is 0\n        # XOR of twenty seven same bits is 0\n        # XOR of twenty eight same bits is 0\n        # XOR of twenty nine same bits is 0\n        # XOR of thirty same bits is 0\n        # XOR of thirty one same bits is 0\n        # XOR of thirty two same bits is 0\n        # XOR of thirty three same bits is 0\n        # XOR of thirty four same bits is 0\n        # XOR of thirty five same bits is 0\n        # XOR of thirty six same bits is 0\n        # XOR of thirty seven same bits is 0\n        # XOR of thirty eight same bits is 0\n        # XOR of thirty nine same bits is 0", "find-minimum-in-rotated-sorted-array": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def find(l, r):\n            if nums[l] < nums[r]:\n                return nums[l]\n            while l < r:\n                m = l + (r - l) // 2\n                if nums[m] < nums[l]:\n                    r = m\n                else:\n                    l = m + 1\n            return nums[l]\n        \n        return find(0, len(nums) - 1)", "path-sum-ii": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = []\n        self.helper(root, targetSum, path, res)\n        return res\n    \n    def helper(self, root, targetSum, path, res):\n        if not root:\n            return\n        targetSum -= root.val\n        path.append(root.val)\n        if not root.left and not root.right and targetSum == 0:\n            res.append(path[:])\n        self.helper(root.left, targetSum, path, res)\n        self.helper(root.right, targetSum, path, res)\n        path.pop()", "subsets-ii": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        nums.sort()\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            tmp = [x+[nums[i]] for x in res]\n            res.extend(tmp)\n        return res", "evaluate-reverse-polish-notation": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a+b)\n                elif token == \"-\":\n                    stack.append(a-b)\n                elif token == \"*\":\n                    stack.append(a*b)\n                else:\n                    stack.append(int(a/b))\n            else:\n                stack.append(int(token))\n        return stack.pop()", "maximum-subarray": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n)\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u4e3a\u6570\u7ec4\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u52a8\u6001\u89c4\u5212\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u6570\u7ec4\u5143\u7d20\u7684\u6700\u5927\u503c\u5373\u4e3a\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e i\uff0c\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u5b50\u6570\u7ec4\u548c maxSum[i]\uff0c\n        # \u5b83\u662f\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u5982\u679c nums[i] \u5927\u4e8e 0\uff0c\u90a3\u4e48 maxSum[i] \u5c31\u662f\u4ee5 nums[i] \u5f00\u5934\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u5982\u679c nums[i] \u5c0f\u4e8e 0\uff0c\u90a3\u4e48 maxSum[i] \u5c31\u662f\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u56e0\u4e3a nums[i] \u53ef\u80fd\u662f\u4ee5 nums[i-1] \u5f00\u5934\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5 maxSum[i] \u8981\u53d6 max(maxSum[i-1], 0)\u3002\n        # \u6700\u540e\uff0c\u8fd4\u56de maxSum \u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n        # \n        # \u7b97\u6cd5\u7b80\u6d01\u7248\uff1a\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u4e3a\u6570\u7ec4\u957f\u5ea6\u3002\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\n        # \u52a8\u6001\u89c4\u5212\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\n        # \u6570\u7ec4\u5143\u7d20\u7684\u6700\u5927\u503c\u5373\u4e3a\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e i\uff0c\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u5b50\u6570\u7ec4\u548c maxSum[i]\uff0c\n        # \u5b83\u662f\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\n        # \u5982\u679c nums[i] \u5927\u4e8e 0\uff0c\u90a3\u4e48 maxSum[i] \u5c31\u662f\u4ee5 nums", "search-in-rotated-sorted-array-ii": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"", "unique-paths-ii": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"", "3sum-closest": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = float('inf')\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(target-s) < abs(closest):\n                    closest = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return closest", "factorial-trailing-zeroes": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # \n        # \n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        #", "zigzag-conversion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        rows = [\"\" for _ in range(numRows)]\n        row_index = 0\n        step = 1\n        for c in s:\n            rows[row_index] += c\n            if row_index == 0:\n                step = 1\n            elif row_index == numRows - 1:\n                step = -1\n            row_index += step\n        return \"\".join(rows)", "generate-parentheses": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, n, result):\n            if left == n and right == n:\n                result.append('(' * n + ')' * n)\n                return\n            if left < n:\n                generate(left + 1, right, n, result)\n            if left > right:\n                generate(left, right + 1, n, result)\n        \n        result = []\n        generate(0, 0, n, result)\n        return result", "fraction-to-recurring-decimal": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"", "sort-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        return self.merge(left, right)\n    \n    def merge(self, left, right):\n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        return dummy.next", "set-matrix-zeroes": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # Check for the first row and first column\n        is_first_row = False\n        is_first_col = False\n        if matrix[0][0] == 0:\n            is_first_row = True\n            is_first_col = True\n        else:\n            for i in range(1, len(matrix)):\n                if matrix[i][0] == 0:\n                    is_first_col = True\n                    break\n            for j in range(1, len(matrix[0])):\n                if matrix[0][j] == 0:\n                    is_first_row = True\n                    break\n\n        # Set the first row and column to 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[0][j] = 0\n                    matrix[i][0] = 0\n\n        # Set the other rows and columns to 0\n        for i in range(1, len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[0][j] = 0\n                    matrix[i][0] = 0\n\n        # Set the first row and column to 0 if necessary\n        if is_first_row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0\n        if is_first_col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0", "remove-nth-node-from-end-of-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        slow, fast = dummy, dummy\n        \n        for _ in range(n):\n            fast = fast.next\n            \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n            \n        slow.next = slow.next.next\n        return dummy.next", "convert-sorted-list-to-binary-search-tree": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        def getLength(head):\n            l = 0\n            while head:\n                l += 1\n                head = head.next\n            return l\n        \n        def toBST(head, length):\n            if not head:\n                return None\n            if length == 1:\n                return TreeNode(head.val)\n            if not head.next:\n                return TreeNode(head.val)\n            \n            slow = head\n            fast = head.next\n            prev = None\n            for _ in range(length // 2):\n                prev = slow\n                slow = slow.next\n                fast = fast.next\n            \n            prev.next = None\n            \n            root = TreeNode(slow.val)\n            root.left = toBST(head, length // 2)\n            root.right = toBST(slow.next, length - length // 2)\n            return root\n        \n        return toBST(head, getLength(head))", "subsets": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in range(len(nums)):\n            res += [x+[nums[i]] for x in res]\n        return res", "integer-to-roman": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the dictionary\n        roman_numerals = {\n            1: \"I\",\n            5: \"V\",\n            10: \"X\",\n            50: \"L\",\n            100: \"C\",\n            500: \"D\",\n            1000: \"M\"\n        }\n        roman_numerals_values = {\n            \"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n        }\n        \n        # Initialize the result\n        result = \"\"\n        \n        # Iterate through the roman numerals dictionary\n        for value, numeral in roman_numerals.items():\n            # Check if the value is a multiple of the current numeral\n            while num % value == 0:\n                # Add the numeral to the result\n                result += numeral\n                # Subtract the numeral from the number\n                num -= value\n        \n        return result", "recover-binary-search-tree": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            if self.pre and self.cur > root.val:\n                self.res = root.val\n                self.cur = root.val\n            else:\n                self.pre = root.val\n                self.cur = root.val\n            inorder(root.right)\n            \n        self.res = None\n        self.pre = None\n        self.cur = None\n        inorder(root)\n        root.val = self.res\n\"\"\"\n\nclass Solution:\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            if self.pre and self.cur > root.val:\n                self.res = root.val\n                self.cur = root.val\n            else:\n                self.pre = root.val\n                self.cur = root.val\n            inorder(root.right)\n            \n        self.res = None\n        self.pre = None\n        self.cur = None\n        inorder(root)\n        root.val = self.res", "simplify-path": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"", "valid-sudoku": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(9):\n            row = set()\n            col = set()\n            for j in range(9):\n                if board[i][j] in row:\n                    return False\n                row.add(board[i][j])\n                if board[j][i] in col:\n                    return False\n                col.add(board[j][i])\n            row.clear()\n            col.clear()\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = set()\n                for r in range(i, i+3):\n                    for c in range(j, j+3):\n                        if board[r][c] in box:\n                            return False\n                        box.add(board[r][c])\n                box.clear()\n        return True", "reverse-words-in-a-string": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return \" \".join(s.split()[::-1])", "reorder-list": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        prev, cur = None, slow\n        while cur:\n            cur.next, prev, cur = prev, cur, cur.next\n            \n        l1, l2 = head, prev\n        while l2.next:\n            l1.next, l1 = l2, l1.next\n            l2.next, l2 = l1, l2.next\n            \n        return head", "permutations": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def permuteHelper(nums, start):\n            if start == len(nums) - 1:\n                return [nums[:]]\n            result = []\n            for i in range(start, len(nums)):\n                nums[i], nums[start] = nums[start], nums[i]\n                result += permuteHelper(nums, start + 1)\n                nums[i], nums[start] = nums[start], nums[i]\n            return result\n        \n        return permuteHelper(nums, 0)", "search-a-2d-matrix": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"", "add-two-numbers": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        head = ListNode()\n        curr = head\n        carry = 0\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            curr = curr.next\n            carry //= 10\n        return head.next", "container-with-most-water": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(height)-1\n        res = 0\n        while l < r:\n            res = max(res, (r-l)*min(height[l], height[r]))\n            if height[l] < height[r]:\n                l += 1\n            else:\n                r -= 1\n        return res", "word-search": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"", "distinct-subsequences": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"", "first-missing-positive": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 1\n        \n        for i in range(len(nums)):\n            if nums[i] <= 0:\n                nums[i] = len(nums) + 1\n        \n        for i in range(len(nums)):\n            num = abs(nums[i])\n            if num <= len(nums):\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(len(nums)):\n            if nums[i] > 0:\n                return i + 1\n        \n        return len(nums) + 1", "permutation-sequence": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        def factorial(n):\n            if n == 1:\n                return 1\n            return n*factorial(n-1)\n        \n        def getPermutationHelper(n, k, nums, permutation):\n            if n == 1:\n                return nums[0]\n            k = k%factorial(n-1)\n            index = 0\n            while k > 0:\n                k, index = k-1, index+1\n            return permutation + str(nums[index]) + getPermutationHelper(n-1, k, nums[:index] + nums[index+1:], permutation)\n        \n        nums = [i for i in range(1, n+1)]\n        return getPermutationHelper(n, k-1, nums, \"\")", "expression-add-operators": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"", "burst-balloons": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        n = len(nums)\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        \n        for i in range(n - 1, -1, -1):\n            for j in range(i + 2, n + 2):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i - 1] * nums[k] * nums[j])\n                    \n        return dp[0][n + 1]", "regular-expression-matching": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"", "create-maximum-number": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def compare(nums1, nums2, k):\n            res = []\n            i = j = 0\n            while i < len(nums1) and j < len(nums2):\n                if self.cmp(nums1[i], nums2[j], k):\n                    res.append(nums1[i])\n                    i += 1\n                else:\n                    res.append(nums2[j])\n                    j += 1\n            if i < len(nums1):\n                res.extend(nums1[i:])\n            if j < len(nums2):\n                res.extend(nums2[j:])\n            return res\n        \n        def cmp(x, y, k):\n            return self.cmp_helper(x, y, k, 1)\n        \n        def cmp_helper(x, y, k, m):\n            if m == k:\n                return x > y\n            mid = (m >> 1) + (m & 1)\n            if k - m == 0:\n                return x > y\n            if k - m == 1:\n                return self.cmp_helper(x, y, k - m, mid)\n            if k - m == 2:\n                return self.cmp_helper(x, y, k - m, mid) and self.cmp_helper(x, y, k - m, mid + 1)\n            return self.cmp_helper(x, y, k - m, mid) or self.cmp_helper(x, y, k - m, mid + 1)\n        \n        return compare(nums1, nums2, k)", "dungeon-game": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not dungeon:\n            return 0\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0]*n for _ in range(m)]\n        dp[m-1][n-1] = 1 if dungeon[m-1][n-1] > 0 else -dungeon[m-1][n-1] + 1\n        \n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n            \n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n            \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                down = dp[i+1][j] - dungeon[i][j]\n                right = dp[i][j+1] - dungeon[i][j]\n                dp[i][j] = max(right, down)\n                \n        return dp[0][0]", "find-k-th-smallest-pair-distance": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"", "word-ladder": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"", "best-time-to-buy-and-sell-stock-iv": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(prices) <= 1:\n            return 0\n        \n        if k >= len(prices) // 2:\n            profit = 0\n            for i in range(1, len(prices)):\n                if prices[i] > prices[i-1]:\n                    profit += prices[i] - prices[i-1]\n            return profit\n        \n        buy = [-float('inf')] * (k+1)\n        sell = [0] * (k+1)\n        \n        for price in prices:\n            for i in range(1, k+1):\n                buy[i] = max(buy[i], sell[i-1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[k]", "contains-duplicate-iii": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"", "basic-calculator": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "ipo": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"", "couples-holding-hands": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"", "shortest-palindrome": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"", "minimum-window-substring": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"", "self-crossing": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"", "cut-off-trees-for-golf-event": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"", "count-of-range-sum": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"", "smallest-range-covering-elements-from-k-lists": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "poor-pigs": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"", "swim-in-rising-water": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "best-time-to-buy-and-sell-stock-iii": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"", "remove-invalid-parentheses": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"", "merge-k-sorted-lists": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        heap = []\n        for i, l in enumerate(lists):\n            if l:\n                heapq.heappush(heap, (l.val, i))\n        dummy = ListNode()\n        cur = dummy\n        while heap:\n            val, i = heapq.heappop(heap)\n            cur.next = ListNode(val)\n            cur = cur.next\n            l = lists[i]\n            if l.next:\n                heapq.heappush(heap, (l.next.val, i))\n                lists[i] = l.next\n        return dummy.next", "palindrome-partitioning-ii": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end and s[start] == s[end]:\n                start += 1\n                end -= 1\n            return start >= end\n        \n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        cut = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n            cut[i][i] = 0\n        for i in range(n - 1):\n            dp[i][i + 1] = s[i] == s[i + 1]\n            cut[i][i + 1] = 0 if dp[i][i + 1] else 1\n        for l in range(3, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                if isPalindrome(s, i, j):\n                    dp[i][j] = True\n                    cut[i][j] = 0\n                else:\n                    dp[i][j] = False\n                    cut[i][j] = float('inf')\n                    for k in range(i, j):\n                        if dp[i][k] and dp[k + 1][j]:\n                            cut[i][j] = min(cut[i][j], cut[i][k] + cut[k + 1][j])\n        return cut[0][n - 1]", "preimage-size-of-factorial-zeroes-function": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"", "palindrome-pairs": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"", "contain-virus": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"", "longest-increasing-path-in-a-matrix": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"", "number-of-digit-one": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        if n <= 1:\n            return n\n        if n <= 9:\n            return 1\n        if n <= 99:\n            return 9\n        if n <= 999:\n            return 10\n        if n <= 9999:\n            return 100\n        if n <= 99999:\n            return 1000\n        if n <= 999999:\n            return 10000\n        if n <= 9999999:\n            return 100000\n        if n <= 99999999:\n            return 1000000\n        if n <= 999999999:\n            return 10000000\n        if n <= 9999999999:\n            return 100000000\n        if n <= 99999999999:\n            return 1000000000\n        if n <= 999999999999:\n            return 10000000000\n        if n <= 9999999999999:\n            return 100000000000\n        if n <= 99999999999999:\n            return 1000000000000\n        if n <= 999999999999999:\n            return 10000000000000\n        if n <= 9999999999999999:\n            return 100000000000000\n        if n <= 99999999999999999:\n            return 1000000000000000\n        if n <= 99999", "word-break-ii": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"", "binary-tree-maximum-path-sum": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.res = float('-inf')\n        self.helper(root)\n        return self.res\n    \n    def helper(self, node):\n        if not node:\n            return 0\n        left = max(self.helper(node.left), 0)\n        right = max(self.helper(node.right), 0)\n        self.res = max(self.res, left+right+node.val)\n        return node.val + max(left, right)", "trapping-rain-water-ii": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m = len(heightMap)\n        n = len(heightMap[0])\n        \n        left = [0]*m\n        right = [0]*m\n        max_left = 0\n        max_right = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if j == 0:\n                    left[i] = heightMap[i][j]\n                else:\n                    left[i] = max(left[i], heightMap[i][j])\n                    max_left = max(max_left, left[i])\n                    \n                if j == n-1:\n                    right[i] = heightMap[i][j]\n                else:\n                    right[i] = max(right[i], heightMap[i][j])\n                    max_right = max(max_right, right[i])\n                    \n        water = 0\n        for i in range(m):\n            for j in range(n):\n                min_height = min(max_left, max_right)\n                if min_height > heightMap[i][j]:\n                    water += min_height - heightMap[i][j]\n        \n        return water", "sliding-window-median": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"", "falling-squares": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "max-sum-of-rectangle-no-larger-than-k": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"", "24-game": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards):\n            if len(cards) == 1:\n                return cards[0] == 24\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    cards1 = cards[:i] + cards[i + 1:]\n                    cards2 = cards[:j] + cards[j + 1:]\n                    for k in range(len(cards1) - 1):\n                        for l in range(k + 1, len(cards1)):\n                            if dfs(cards1[:k] + [cards1[k] * cards1[l]] + cards1[k + 1:l] + cards1[l + 1:]):\n                                return True\n                    for k in range(len(cards2) - 1):\n                        for l in range(k + 1, len(cards2)):\n                            if dfs(cards2[:k] + [cards2[k] * cards2[l]] + cards2[k + 1:l] + cards2[l + 1:]):\n                                return True\n                    for k in range(len(cards1)):\n                        for l in range(len(cards2)):\n                            if dfs(cards1[:k] + cards1[k + 1:] + cards2[:l] + cards2[l + 1:]):\n                                return True\n                    for k in range(len(cards1)):\n                        for l in range(len(cards2)):\n                            if dfs(cards1[:k] + cards1[k + 1:] + [cards2[l] * cards2[l + 1]] + cards2[l + 2:]):\n                                return True\n                    for k in range(len(cards1)):\n                        for l in range(len(cards2)):\n                            if dfs([cards1[k] * cards2[l]] + cards1[k + 1:] + cards2[l + 1:]):\n                                return True\n            return False\n        \n        return dfs(cards)", "wildcard-matching": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"", "reconstruct-itinerary": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        graph = collections.defaultdict(list)\n        for u, v in tickets:\n            graph[u].append(v)\n            \n        for u in graph:\n            graph[u].sort(reverse=True)\n            \n        route = []\n        self.dfs(\"JFK\", graph, route)\n        return route[::-1]\n        \n    def dfs(self, node, graph, route):\n        while graph[node]:\n            self.dfs(graph[node].pop(), graph, route)\n        route.append(node)", "the-skyline-problem": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"", "integer-to-english-words": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        def toWords(num):\n            if num == 0:\n                return \"\"\n            if num < 20:\n                return numDict[num]\n            elif num < 100:\n                tens, units = divmod(num, 10)\n                return tensDict[tens] + \" \" + toWords(units)\n            elif num < 1000:\n                hundreds, units = divmod(num, 100)\n                return hundredsDict[hundreds] + \" \" + toWords(units)\n            elif num < 1000000:\n                thousands, units = divmod(num, 1000)\n                return thousandsDict[thousands] + \" \" + toWords(units)\n            elif num < 1000000000:\n                millions, units = divmod(num, 1000000)\n                return millionsDict[millions] + \" \" + toWords(units)\n            else:\n                billions, units = divmod(num, 1000000000)\n                return billionsDict[billions] + \" \" + toWords(units)\n\n        numDict = {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\",\n            10: \"Ten\",\n            11: \"Eleven\",\n            12: \"Twelve\",\n            13: \"Thirteen\",\n            14: \"Fourteen\",\n            15: \"Fifteen\",\n            16: \"Sixteen\",\n            17: \"Seventeen\",\n            18: \"Eighteen\",\n            19: \"Nineteen\",\n        }\n        tensDict = {\n            2: \"Twenty\",\n            3: \"Thirty\",\n            4: \"Forty\",\n            5: \"Fifty\",\n            6: \"", "k-inverse-pairs-array": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102068/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102067/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102066/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102065/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102063/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102061/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102059/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102058/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102057/Python-DP-O(n)-time-O(n)-space-explanation\n        # https://leetcode.com/problems/k-inverse-pairs-array/discuss/102056/Python-", "redundant-connection-ii": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"", "cherry-pickup": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"", "student-attendance-record-ii": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 3\n        \n        if n == 2:\n            return 8\n        \n        dp = [1, 1, 2]\n        for i in range(3, n+1):\n            dp.append((dp[i-1] + dp[i-2] + dp[i-3]) % 1000000007)\n        \n        return dp[n]", "split-array-largest-sum": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"", "find-the-closest-palindrome": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"", "frog-jump": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"", "substring-with-concatenation-of-all-words": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"", "max-chunks-to-make-sorted-ii": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"", "reverse-pairs": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge_sort(nums, start, end):\n            if start >= end:\n                return 0\n            mid = start + (end - start) // 2\n            count = merge_sort(nums, start, mid) + merge_sort(nums, mid + 1, end)\n            i = j = start\n            for k in range(start, end + 1):\n                if i >= mid + 1 and j <= end or nums[i] <= nums[j]:\n                    nums[k] = nums[i]\n                    i += 1\n                else:\n                    nums[k] = nums[j]\n                    j += 1\n                    count += (mid - i + 1)\n            return count\n        \n        return merge_sort(nums, 0, len(nums) - 1)", "reaching-points": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == ty:\n                return True\n            elif tx > ty:\n                if (tx - ty) % sy == 0:\n                    tx = tx - ty\n                else:\n                    return False\n            else:\n                if (ty - tx) % sx == 0:\n                    ty = ty - tx\n                else:\n                    return False\n        return False", "course-schedule-iii": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses = sorted(courses, key=lambda x: x[1])\n        endTime, count = 0, 0\n        for c in courses:\n            if endTime <= c[0]:\n                count += 1\n                endTime = c[1]\n        return count", "reverse-nodes-in-k-group": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        def reverse(head, k):\n            if not head or not head.next or k <= 1:\n                return head\n            prev, cur, next = None, head, head.next\n            for _ in range(k):\n                next = cur.next\n                cur.next = prev\n                prev = cur\n                cur = next\n            head.next = reverse(next, k)\n            return prev\n        \n        if not head or not head.next or k <= 1:\n            return head\n        head.next = reverse(head.next, k)\n        return head", "stickers-to-spell-word": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"", "strange-printer": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a dp array to store the number of times we need to print a string to get the longest substring\n        # with the same character\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n        \n        # Base case: the string is only one character\n        for i in range(len(s)):\n            dp[i][i] = 1\n        \n        # Start from the second character\n        for length in range(2, len(s)+1):\n            for i in range(len(s)-length+1):\n                j = i + length - 1\n                dp[i][j] = dp[i+1][j] + 1\n                \n                # Check all possible substrings to find the longest substring with the same character\n                for k in range(i, j):\n                    if s[k] == s[j]:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n                \n        return dp[0][len(s)-1]", "sliding-window-maximum": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"", "median-of-two-sorted-arrays": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"", "word-ladder-ii": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"", "largest-rectangle-in-histogram": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"", "perfect-rectangle": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"", "sliding-puzzle": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def get_pos(board):\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        return i, j\n        \n        def move(board, i, j, target_i, target_j):\n            board[i][j], board[target_i][target_j] = board[target_i][target_j], board[i][j]\n            return board\n        \n        def dfs(board):\n            if board == [[1,2,3],[4,5,0]]:\n                return 0\n            i, j = get_pos(board)\n            if i == 0 and j == 0:\n                return dfs(move(board, 1, 0, 0, 1)) + 1\n            if i == 0 and j == 1:\n                return dfs(move(board, 1, 1, 1, 0)) + 1\n            if i == 0 and j == 2:\n                return dfs(move(board, 1, 2, 2, 0)) + 1\n            if i == 1 and j == 0:\n                return dfs(move(board, 0, 0, 0, 1)) + 1\n            if i == 1 and j == 1:\n                return dfs(move(board, 0, 1, 1, 0)) + 1\n            if i == 1 and j == 2:\n                return dfs(move(board, 0, 2, 2, 0)) + 1\n            return -1\n        \n        return dfs(board)", "decode-ways-ii": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"", "strong-password-checker": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"", "trapping-rain-water": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        result = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > left_max:\n                    left_max = height[left]\n                else:\n                    result += left_max - height[left]\n                left += 1\n            else:\n                if height[right] > right_max:\n                    right_max = height[right]\n                else:\n                    result += right_max - height[right]\n                right -= 1\n                \n        return result", "count-of-smaller-numbers-after-self": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        def merge(nums, start, mid, end):\n            i = start\n            j = mid + 1\n            k = start\n            while i <= mid and j <= end:\n                if nums[i] <= nums[j]:\n                    nums[k] = nums[i]\n                    i += 1\n                else:\n                    nums[k] = nums[j]\n                    j += 1\n                k += 1\n            while i <= mid:\n                nums[k] = nums[i]\n                i += 1\n                k += 1\n            while j <= end:\n                nums[k] = nums[j]\n                j += 1\n                k += 1\n        \n        def countSmaller(nums, start, end):\n            if start == end:\n                return 0\n            mid = (start + end) // 2\n            countSmaller(nums, start, mid)\n            countSmaller(nums, mid + 1, end)\n            merge(nums, start, mid, end)\n            return nums\n        \n        return countSmaller(nums, 0, len(nums) - 1)", "set-intersection-size-at-least-two": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"", "number-of-atoms": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"", "patching-array": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"", "longest-valid-parentheses": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        stack = [-1]\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        return max_len", "russian-doll-envelopes": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"", "super-washing-machines": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines)!= 0:\n            return -1\n        \n        target = total // len(machines)\n        diff = 0\n        for i in range(len(machines)):\n            diff += machines[i] - target\n        return diff", "kth-smallest-number-in-multiplication-table": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(target):\n            count = 0\n            for i in range(1, m+1):\n                count += min(target//i, n)\n            return count\n        \n        lo, hi = 1, m*n\n        while lo < hi:\n            mid = lo + (hi-lo)//2\n            if count(mid) < k:\n                lo = mid+1\n            else:\n                hi = mid\n        return lo", "maximal-rectangle": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"", "find-minimum-in-rotated-sorted-array-ii": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "valid-number": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"", "sudoku-solver": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(x, y, num):\n            for i in range(9):\n                if board[i][y] == num:\n                    return False\n            for j in range(9):\n                if board[x][j] == num:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if board[3*i+x][3*j+y] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == \".\":\n                        for k in range(1, 10):\n                            if isValid(i, j, str(k)):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                board[i][j] = \".\"\n                        return False\n            return True\n        solve(board)\n        return board", "scramble-string": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1)!= len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1)!= sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False", "word-search-ii": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(x, y, visited, word, board, words):\n            if not word:\n                return False\n            \n            if word in words:\n                words.remove(word)\n                return True\n            \n            if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or visited[x][y] or board[x][y]!= word[0]:\n                return False\n            \n            visited[x][y] = True\n            result = dfs(x + 1, y, visited, word[1:], board, words) or dfs(x - 1, y, visited, word[1:], board, words) or dfs(x, y + 1, visited, word[1:], board, words) or dfs(x, y - 1, visited, word[1:], board, words)\n            visited[x][y] = False\n            return result\n        \n        visited = [[False for _ in range(len(board[0]))] for _ in range(len(board))]\n        result = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                word = board[i][j]\n                for word in words:\n                    if dfs(i, j, visited, word, board, words):\n                        result.append(word)\n        return result", "candy": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"", "arithmetic-slices-ii-subsequence": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"", "text-justification": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"", "concatenated-words": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(word, words):\n            if word in words:\n                return True\n            for i in range(1, len(word)):\n                if dfs(word[i:], words):\n                    return True\n            return False\n        \n        ans = []\n        for word in words:\n            if dfs(word, words):\n                ans.append(word)\n        return ans", "n-queens-ii": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, queens):\n            for i in range(row):\n                if queens[i] == col or abs(queens[i] - col) == row - i:\n                    return False\n            return True\n        \n        def dfs(row, n, queens):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col, queens):\n                    queens[row] = col\n                    count += dfs(row + 1, n, queens)\n            return count\n        \n        return dfs(0, n, [-1] * n)", "n-queens": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\""}